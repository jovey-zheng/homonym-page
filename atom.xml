<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jovey&#39;s Notes</title>
  <subtitle>心有猛虎 细嗅蔷薇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://joveyzheng.com/"/>
  <updated>2017-06-15T12:36:46.000Z</updated>
  <id>http://joveyzheng.com/</id>
  
  <author>
    <name>Jovey Zheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解闭包</title>
    <link href="http://joveyzheng.com/2017/06/15/understand-closure/"/>
    <id>http://joveyzheng.com/2017/06/15/understand-closure/</id>
    <published>2017-06-15T04:04:33.000Z</published>
    <updated>2017-06-15T12:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>闭包</strong> 是指可以包含自由（未绑定到特定对象）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（局部变量）。“闭包” 一词来源于以下两者的结合：要执行的代码块（由于自由变量被包含在代码块中，这些自由变量以及它们引用的对象没有被释放）和为自由变量提供绑定的计算环境（作用域）。</p>
</blockquote>
<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>闭包的一个重点在于<strong>作用域</strong>，在 JavaScript 中变量的作用域分两种：全局变量与局部变量，首先让我们来了解一下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _global = <span class="number">1</span>;  <span class="comment">// 全局变量</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _internal = <span class="number">2</span>;  <span class="comment">// 局部变量</span></div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(_global); <span class="comment">// 1</span></div><div class="line">  <span class="built_in">console</span>.log(_internal); <span class="comment">// 2</span></div><div class="line">  <span class="keyword">return</span> _internal;</div><div class="line">&#125;</div><div class="line"></div><div class="line">print();</div><div class="line"><span class="built_in">console</span>.log(_global); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(_internal); <span class="comment">// ReferenceError: _internal is not defined</span></div></pre></td></tr></table></figure>
<p>此时我们可以看到，在函数内部是可以直接读取全局变量的。但当我们在外部想访问内部变量时，就会报错，因为在函数体外部时无法访问函数内部的变量的。</p>
<p>需要注意的是，当在函数内部定义变量时没用使用 <code>var</code> 等声明变量，那么它实际上会成为一个<strong>全局变量</strong>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  _internal = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(_internal); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>从内存中解释，变量的声明都存在栈中，而在 JavaScript 中存在垃圾回收机制（garbage collection），当一个函数执行完返回之后，它的内存会被自动回收，此时函数内部的变量都会被销毁。</p>
<p>那么我们有什么方法可以保存这一内存，并且在外部访问函数内部的变量呢 —— <strong>闭包</strong>。</p>
<a id="more"></a>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>在正常情况下，我们在外部时无法修改函数内部变量的值：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 场景 1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _internal = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(_internal + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">print(<span class="number">1</span>); <span class="comment">// 2</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">print(<span class="number">1</span>); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>我们可以看到，无论 <code>print()</code> 调用多少次，打印的值都是 <code>2</code>，<code>_internal</code> 的值都是 <code>1</code>。</p>
<p>这是因为 JavaScript 中的垃圾回收机制，在多次调用 <code>print()</code> 时，每一次都需要回收前一次的内存，之后再次申请新内存，因此 <code>_internal</code> 无法在内存中继续保存。</p>
<p>换而言之，在每次调用 <code>print()</code> 时都需要为其和内部的变量申请新的内存空间，第一次 <code>_internal</code> 的内存地址可能为 <code>0x...1</code>，在函数调用完成之后，这块内存将被释放，再次调用时 <code>_internal</code> 的内存地址可能就是 <code>0x...2</code> 了。因此它无法再内存中被保存下来。</p>
<p>那么我们需要在外部使用函数内部的变量时，就需要在函数内部再声明一个函数，并将其返回：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _internal = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(_internal);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = print();</div><div class="line">test(); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>此时，我们已经可以从外部访问 <code>print()</code> 函数内部的变量了。</p>
<p>当我们需要对 <code>print()</code> 函数内部的 <code>_internal</code> 的值进行修改时，我们可以给它另外一个函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 场景 2</span></div><div class="line"><span class="keyword">var</span> add;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _internal = <span class="number">1</span>;</div><div class="line"></div><div class="line">  add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    _internal += x;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(_internal);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = print();</div><div class="line">test(); <span class="comment">// 1</span></div><div class="line">add(<span class="number">1</span>);</div><div class="line">test(); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>经过上述可以看出，函数 <code>print()</code> 在经过 <code>add()</code> 运行之后，<code>_internal</code> 的值分别为 <code>1</code> 和 <code>2</code>，这就说明了 <code>_internal</code> 始终保存在内存中，并没有在 <code>var test = print();</code> 调用时被回收。</p>
<p>这是因为 <code>print()</code> 内的 <code>log()</code> 作为返回值，被赋给 <code>test</code> 这个全局变量，因此 <code>log()</code> 始终在内存中。而 <code>log()</code> 依赖 <code>print()</code> 并且可以访问 <code>_internal</code>，所以 <code>print()</code> 也始终在内存中，而且在 <code>var test = print();</code> 调用时没有被回收。</p>
<p>换而言之，当 <code>_internal</code> 在声明的时候分配了内存，我们可以将其内存地址表示为 <code>0x...1</code>，在 <code>print()</code> 函数被调用之后应该会被回收，但是由于上述原因，没有被回收，它的值将继续保留在地址为 <code>0x...1</code> 中。在外部可以使用指针去寻址，并取得其值。</p>
<h1 id="其他例子"><a href="#其他例子" class="headerlink" title="其他例子"></a>其他例子</h1><p>在循环体中，我们可能遇到：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopA</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = loopA();</div><div class="line">test[<span class="number">0</span>]();  <span class="comment">// 10</span></div><div class="line">test[<span class="number">1</span>]();  <span class="comment">// 10</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">test[<span class="number">9</span>]();  <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p>在上述例子中，我们需要他们执行不同的参数得到不同的值。但是一共创建了 10 次匿名函数，，他们都是共享同一个环境的。在匿名函数执行之前，循环早已完成，此时的匿名函数一局指向循环体中的最后一个值了。</p>
<ul>
<li><p>解决方案 1：<br>在 <code>es6</code> 中我们可以使用 <code>let</code> 声明：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopA</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = loopA();</div><div class="line">test[<span class="number">0</span>]();  <span class="comment">// 0</span></div><div class="line">test[<span class="number">1</span>]();  <span class="comment">// 1</span></div><div class="line"><span class="comment">// ...</span></div><div class="line">test[<span class="number">9</span>]();  <span class="comment">// 9</span></div></pre></td></tr></table></figure>
</li>
<li><p>解决方案 2：<br>将函数声明放在循环体外部：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopA</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = [];</div><div class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> n;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    arr[i] = func(i)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = loopA();</div><div class="line">test[<span class="number">0</span>];  <span class="comment">// 0</span></div><div class="line">test[<span class="number">1</span>];  <span class="comment">// 1</span></div><div class="line">test[<span class="number">9</span>];  <span class="comment">// 9</span></div></pre></td></tr></table></figure>
</li>
<li><p>解决方案 3：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopA</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    arr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;)(i)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = loopA();</div><div class="line">test[<span class="number">0</span>];  <span class="comment">// 0</span></div><div class="line">test[<span class="number">1</span>];  <span class="comment">// 1</span></div><div class="line">test[<span class="number">9</span>];  <span class="comment">// 9</span></div></pre></td></tr></table></figure>
</li>
<li><p>其他解决方案请看<a href="#参考">参考</a></p>
</li>
</ul>
<h1 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h1><ul>
<li>内存泄漏：由于闭包会使得函数内部的变量都被保存在内存中，不会被销毁，内存消耗很大。因此需要在退出函数之前，将不使用的变量都删除。</li>
<li>会修改函数内部变量的值。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。<br>如果不是因为某些特殊任务而需要闭包，在没有必要的情况下，在其它函数中创建函数是不明智的，因为闭包对脚本性能具有负面影响，包括处理速度和内存消耗。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://baike.baidu.com/link?url=Gz24DLW_-l_Yn4FkNhonNSvQTgsgGNLp3xeDww9Cjbq_YjvtxIOqwAxVx9R8s5z1if2BdDCtP_cJmz20WV91qi6OTxO-C_qcMnLEFzhvu8C" target="_blank" rel="external">百度百科 - 闭包</a><br><a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" target="_blank" rel="external">Wikipedia - Closure</a><br><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">学习 Javascript 闭包（Closure）</a><br><a href="https://developer.mozilla.org/cn/docs/Web/JavaScript/Closures" target="_blank" rel="external">MDN - 闭包</a><br><a href="http://www.cnblogs.com/xiaohuochai/p/5730085.html" target="_blank" rel="external">深入理解闭包系列第二篇——从执行环境角度看闭包</a><br><a href="http://www.cnblogs.com/xiaohuochai/p/5731641.html" target="_blank" rel="external">深入理解闭包系列第四篇——常见的一个循环和闭包的错误详解</a><br><a href="http://www.cnblogs.com/wangfupeng1988/p/3994065.html" target="_blank" rel="external">深入理解javascript原型和闭包（15）——闭包</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;闭包&lt;/strong&gt; 是指可以包含自由（未绑定到特定对象）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（局部变量）。“闭包” 一词来源于以下两者的结合：要执行的代码块（由于自由变量被包含在代码块中，这些自由变量以及它们引用的对象没有被释放）和为自由变量提供绑定的计算环境（作用域）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h1&gt;&lt;p&gt;闭包的一个重点在于&lt;strong&gt;作用域&lt;/strong&gt;，在 JavaScript 中变量的作用域分两种：全局变量与局部变量，首先让我们来了解一下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _global = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 全局变量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _internal = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 局部变量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(_global); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(_internal); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _internal;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(_global); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(_internal); &lt;span class=&quot;comment&quot;&gt;// ReferenceError: _internal is not defined&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时我们可以看到，在函数内部是可以直接读取全局变量的。但当我们在外部想访问内部变量时，就会报错，因为在函数体外部时无法访问函数内部的变量的。&lt;/p&gt;
&lt;p&gt;需要注意的是，当在函数内部定义变量时没用使用 &lt;code&gt;var&lt;/code&gt; 等声明变量，那么它实际上会成为一个&lt;strong&gt;全局变量&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _internal = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(_internal); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从内存中解释，变量的声明都存在栈中，而在 JavaScript 中存在垃圾回收机制（garbage collection），当一个函数执行完返回之后，它的内存会被自动回收，此时函数内部的变量都会被销毁。&lt;/p&gt;
&lt;p&gt;那么我们有什么方法可以保存这一内存，并且在外部访问函数内部的变量呢 —— &lt;strong&gt;闭包&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记随笔" scheme="http://joveyzheng.com/categories/%E7%AC%94%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="JavaScript" scheme="http://joveyzheng.com/tags/JavaScript/"/>
    
      <category term="closure" scheme="http://joveyzheng.com/tags/closure/"/>
    
      <category term="闭包" scheme="http://joveyzheng.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>实用的 CSS — 贝塞尔曲线(cubic-bezier)</title>
    <link href="http://joveyzheng.com/2016/03/16/css-cubic-bezier/"/>
    <id>http://joveyzheng.com/2016/03/16/css-cubic-bezier/</id>
    <published>2016-03-16T02:39:07.000Z</published>
    <updated>2017-06-15T12:35:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在了解 <code>cubic-bezier</code> 之前，你需要对 CSS3 中的动画效果有所认识，它是 <code>animation-timing-function</code> 和 <code>transition-timing-function</code> 中一个重要的内容。</p>
<h1 id="本体"><a href="#本体" class="headerlink" title="本体"></a>本体</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>cubic-bezier</code> 又称<strong>三次贝塞尔</strong>，主要是为 <code>animation</code> 生成速度曲线的函数，规定是 <code>cubic-bezier(&lt;x1&gt;, &lt;y1&gt;, &lt;x2&gt;, &lt;y2&gt;)</code>。</p>
<p>我们可以从下图中简要理解一下 <code>cubic-bezier</code>：<br><img src="/static/images/cubic-bezier-01.png" alt="cubic-bezier"><br><img src="/static/images/cubic-bezier-02.jpg" alt="cubic-bezier"></p>
<p>从上图我们需要知道的是 <code>cubic-bezier</code> 的取值范围:</p>
<ul>
<li>P0：默认值 (0, 0)</li>
<li><strong>P1：动态取值 (x1, y1)</strong></li>
<li><strong>P2：动态取值 (x2, y2)</strong></li>
<li>P3：默认值 (1, 1)</li>
</ul>
<a id="more"></a>
<p>我们需要关注的是 P1 和 P2 两点的取值，而其中 <strong><code>X 轴</code></strong>的取值范围是 <strong>0</strong> 到 <strong>1</strong>，当取值超出范围时 <code>cubic-bezier</code> 将失效；<code>Y 轴</code>的取值没有规定，当然也毋须过大。</p>
<p>最直接的理解是，将<strong>以一条直线放在范围只有 1 的坐标轴中，并从中间拿出两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的速度曲线</strong>。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在测试例子中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .animation &#123;</div><div class="line">      width: 50px;</div><div class="line">      height: 50px;</div><div class="line">      background-color: #ed3;</div><div class="line">      -webkit-transition:  all 2s;</div><div class="line">           -o-transition:  all 2s;</div><div class="line">              transition:  all 2s;</div><div class="line">    &#125;</div><div class="line">    .animation:hover &#123;</div><div class="line">      -webkit-transform:  translateX(100px);</div><div class="line">          -ms-transform:  translateX(100px);</div><div class="line">           -o-transform:  translateX(100px);</div><div class="line">              transform:  translateX(100px);</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"animation"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们可以在浏览器中看到，当鼠标移到元素上时，元素开始向右移动，开始比较慢，之后则比较快，移开时按原曲线回到原点。</p>
<p>在例子中，当我们不为 <code>transition</code> 添加 <code>cubic-bezier</code> 或是其他 <code>timing-function</code> 时，默认的速度曲线是 <code>ease</code>，此时的速度曲线是：<br><img src="/static/images/cubic-bezier-03.png" alt="cubic-bezier"></p>
<p>那么让我们在代码中加入 <code>cubic-bezier(.17, .86, .73, .14)</code>：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">.animation &#123;</div><div class="line">  ...</div><div class="line">  -webkit-transition:  all 2s cubic-bezier(.17, .86, .73, .14);</div><div class="line">       -o-transition:  all 2s cubic-bezier(.17, .86, .73, .14);</div><div class="line">          transition:  all 2s cubic-bezier(.17, .86, .73, .14);</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>再刷新页面观察效果，会看到动画在执行过程中有一段很缓慢的移动，前后的速度相似，此时的运动曲线是：<br><img src="/static/images/cubic-bezier-04.png" alt="cubic-bezier"></p>
<h2 id="几个常用的固定值对应的-cubic-bezier-值以及速度曲线"><a href="#几个常用的固定值对应的-cubic-bezier-值以及速度曲线" class="headerlink" title="几个常用的固定值对应的 cubic-bezier 值以及速度曲线"></a>几个常用的固定值对应的 <code>cubic-bezier</code> 值以及速度曲线</h2><ol>
<li><p><code>ease</code>：cubic-bezier(.25, .1, .25, 1)<br><img src="/static/images/cubic-bezier-03.png" alt="cubic-bezier"></p>
</li>
<li><p><code>liner</code>：cubic-bezier(0, 0, 1, 1) / cubic-bezier(1, 1, 0, 0)<br><img src="/static/images/cubic-bezier-05.png" alt="cubic-bezier"></p>
</li>
<li><p><code>ease-in</code>：cubic-bezier(.42, 0, 1, 1)<br><img src="/static/images/cubic-bezier-06.png" alt="cubic-bezier"></p>
</li>
<li><p><code>ease-out</code>：cubic-bezier(0, 0, .58, 1)<br><img src="/static/images/cubic-bezier-07.png" alt="cubic-bezier"></p>
</li>
<li><p><code>ease-in-out</code>：cubic-bezier(.42, 0, .58, 1)<br><img src="/static/images/cubic-bezier-08.png" alt="cubic-bezier"></p>
</li>
<li><p>In Out . Back（来回的缓冲效果）：cubic-bezier(0.68, -0.55, 0.27, 1.55)<br><img src="/static/images/cubic-bezier-09.png" alt="cubic-bezier"></p>
</li>
</ol>
<h1 id="效果参考"><a href="#效果参考" class="headerlink" title="效果参考"></a>效果参考</h1><p>文章所提到的动画效果可以在下面站点中看到，当然你也可以大胆尝试：</p>
<ul>
<li><a href="http://cubic-bezier.com/#.17,.67,.83,.67" target="_blank" rel="external">英文版在线预览（Lea Verou）</a></li>
<li><a href="http://yisibl.github.io/cubic-bezier/#.17,.67,.83,.67" target="_blank" rel="external">中文版在线预览（更多效果）</a></li>
<li><a href="http://xuanfengge.com/easeing/ceaser/" target="_blank" rel="external">在线生成系列</a></li>
<li><a href="https://github.com/jovey-zheng/loader" target="_blank" rel="external">作者的《Loading》库</a></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function" target="_blank" rel="external">MDN</a><br><a href="http://www.w3school.com.cn/cssref/pr_animation-timing-function.asp" target="_blank" rel="external">W3School</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在了解 &lt;code&gt;cubic-bezier&lt;/code&gt; 之前，你需要对 CSS3 中的动画效果有所认识，它是 &lt;code&gt;animation-timing-function&lt;/code&gt; 和 &lt;code&gt;transition-timing-function&lt;/code&gt; 中一个重要的内容。&lt;/p&gt;
&lt;h1 id=&quot;本体&quot;&gt;&lt;a href=&quot;#本体&quot; class=&quot;headerlink&quot; title=&quot;本体&quot;&gt;&lt;/a&gt;本体&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cubic-bezier&lt;/code&gt; 又称&lt;strong&gt;三次贝塞尔&lt;/strong&gt;，主要是为 &lt;code&gt;animation&lt;/code&gt; 生成速度曲线的函数，规定是 &lt;code&gt;cubic-bezier(&amp;lt;x1&amp;gt;, &amp;lt;y1&amp;gt;, &amp;lt;x2&amp;gt;, &amp;lt;y2&amp;gt;)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们可以从下图中简要理解一下 &lt;code&gt;cubic-bezier&lt;/code&gt;：&lt;br&gt;&lt;img src=&quot;/static/images/cubic-bezier-01.png&quot; alt=&quot;cubic-bezier&quot;&gt;&lt;br&gt;&lt;img src=&quot;/static/images/cubic-bezier-02.jpg&quot; alt=&quot;cubic-bezier&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上图我们需要知道的是 &lt;code&gt;cubic-bezier&lt;/code&gt; 的取值范围:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P0：默认值 (0, 0)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P1：动态取值 (x1, y1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P2：动态取值 (x2, y2)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;P3：默认值 (1, 1)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记随笔" scheme="http://joveyzheng.com/categories/%E7%AC%94%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="css" scheme="http://joveyzheng.com/tags/css/"/>
    
      <category term="cubic-bezier" scheme="http://joveyzheng.com/tags/cubic-bezier/"/>
    
      <category term="animation" scheme="http://joveyzheng.com/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 构建博客 - NexT 主题浅谈</title>
    <link href="http://joveyzheng.com/2016/03/03/hexo-theme-next-brief-talk/"/>
    <id>http://joveyzheng.com/2016/03/03/hexo-theme-next-brief-talk/</id>
    <published>2016-03-03T06:16:35.000Z</published>
    <updated>2017-06-15T11:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>利用 <a href="https://github.com/" target="_blank" rel="external">Github</a> 所提供的 <strong>Github Page</strong> 去构建静态的网站已经变得越来越流行，如果还不了解怎么入门，可以阅读我之前的一篇文章<a href="http://www.jianshu.com/p/f66103553c45" target="_blank" rel="external">「使用Hexo + Next搭建静态博客」</a>。当然构建博客的方法不是只有一种，你也可以尝试其他方法，而本文主要是针对 <strong>Hexo</strong> 去叙述的。</p>
</blockquote>
<p>可能看过<a href="http://www.jianshu.com/p/f66103553c45" target="_blank" rel="external">「使用 Hexo + Next 搭建静态博客」</a>这篇文章的同学都已经构建好了属于自己的博客了，那么接下来要说的就是关于 <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT 主题</a>中遇到的一些问题和提示。</p>
<h1 id="关于-RSS"><a href="#关于-RSS" class="headerlink" title="关于 RSS"></a>关于 RSS</h1><p>很多同学在看到别人的博客时，都会发现有订阅的功能（即 RSS），但无奈官方介绍比较少，所以无从下手。</p>
<p>那么下面将教大家如何去做：</p>
<ol>
<li><p>准备<br>你需要安装一个 <strong>Hexo 插件</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-generator-feed</div></pre></td></tr></table></figure>
</li>
<li><p>配置<br>接下来需要在 <code>_config.yml</code> 中配置一下，在 root 目录下的 <code>_config.yml</code> 中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">plugins:</div><div class="line">  hexo-generate-feed</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后在主题文件夹的 <code>_config.yml</code> 中配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss: /atom.xml</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ol>
<li>生成 RSS Feed<br>配置完之后在 CLI 中运行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure>
</li>
</ol>
<p>重新生成一次，你会在 <code>./public</code> 文件夹中看到 <code>atom.xml</code> 文件。然后启动服务器查看是否有效，之后再部署到 <code>Github</code> 中。</p>
<p>最后你可以看到：<br><img src="/static/images/19-1.png" alt="效果"></p>
<h1 id="修改文件后不生效"><a href="#修改文件后不生效" class="headerlink" title="修改文件后不生效"></a>修改文件后不生效</h1><blockquote>
<p>有时候会发现，明明修改了文件的代码，然而没有生效。</p>
</blockquote>
<p>其实不是没有生效，而是静态文件没有更新，此时你需要执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure></p>
<p>然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$hexo g</div></pre></td></tr></table></figure></p>
<p>重新生成一次即可。</p>
<h1 id="社交链接图标"><a href="#社交链接图标" class="headerlink" title="社交链接图标"></a>社交链接图标</h1><p>说明一下，这些图标都是出自 <a href="https://fortawesome.github.io/Font-Awesome/" target="_blank" rel="external"><code>FontAwesome - 4.4.0</code></a>，所以你可以根据自己的需求去修改图标。</p>
<p>实际效果：<br><img src="/static/images/19-2.png" alt="效果"></p>
<p>有的同学会发现自己的图标是个地球：<br><img src="/static/images/19-3.png" alt="效果"></p>
<p>需要配置的是主题文件夹下的 <code>_config.yml</code>，<strong>注意：命名需要一致，包括大小写</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Social links</div><div class="line">social:</div><div class="line">  GitHub: https://github.com/XXX</div><div class="line">  Twitter: https://twitter.com/XXX</div><div class="line">  Weibo: http://weibo.com/XXX</div><div class="line">  Facebook: https://www.facebook.com/XXX</div><div class="line">  JianShu: http://www.jianshu.com/XXX</div><div class="line"></div><div class="line"># Social Icons</div><div class="line">social_icons:</div><div class="line">  enable: true</div><div class="line">  # Icon Mappings</div><div class="line">  GitHub: github</div><div class="line">  Twitter: twitter</div><div class="line">  Weibo: weibo</div><div class="line">  Facebook: facebook-square</div><div class="line">  JianShu: heartbeat</div></pre></td></tr></table></figure></p>
<h1 id="阅读次数"><a href="#阅读次数" class="headerlink" title="阅读次数"></a>阅读次数</h1><p>简单介绍一下此功能的做法。</p>
<ol>
<li><p>准备<br>需要在 <a href="https://leancloud.cn" target="_blank" rel="external">LeanCloud</a> 申请一个帐号，进行一番配置后拿到 AppID 和 AppKey。</p>
</li>
<li><p>配置<br>然后在主题文件夹下的 <code>_config.yml</code> 中配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Show number of visitors to each article.</div><div class="line"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class="line">leancloud_visitors:</div><div class="line">  enable: true</div><div class="line">  app_id: XXX</div><div class="line">  app_key: XXX</div></pre></td></tr></table></figure>
</li>
</ol>
<p>具体可以阅读<a href="http://notes.xiamo.tk/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html" target="_blank" rel="external">这篇文章</a>，里面的介绍非常详细！</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><blockquote>
<p>文章将持续更新，有任何疑问和建议可以在下面评论。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;利用 &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt; 所提供的 &lt;strong&gt;Github Page&lt;/strong&gt; 去构建静态的网站已经变得越来越流行，如果还不了解怎么入门，可以阅读我之前的一篇文章&lt;a href=&quot;http://www.jianshu.com/p/f66103553c45&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;「使用Hexo + Next搭建静态博客」&lt;/a&gt;。当然构建博客的方法不是只有一种，你也可以尝试其他方法，而本文主要是针对 &lt;strong&gt;Hexo&lt;/strong&gt; 去叙述的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能看过&lt;a href=&quot;http://www.jianshu.com/p/f66103553c45&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;「使用 Hexo + Next 搭建静态博客」&lt;/a&gt;这篇文章的同学都已经构建好了属于自己的博客了，那么接下来要说的就是关于 &lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT 主题&lt;/a&gt;中遇到的一些问题和提示。&lt;/p&gt;
&lt;h1 id=&quot;关于-RSS&quot;&gt;&lt;a href=&quot;#关于-RSS&quot; class=&quot;headerlink&quot; title=&quot;关于 RSS&quot;&gt;&lt;/a&gt;关于 RSS&lt;/h1&gt;&lt;p&gt;很多同学在看到别人的博客时，都会发现有订阅的功能（即 RSS），但无奈官方介绍比较少，所以无从下手。&lt;/p&gt;
&lt;p&gt;那么下面将教大家如何去做：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;准备&lt;br&gt;你需要安装一个 &lt;strong&gt;Hexo 插件&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install --save hexo-generator-feed&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置&lt;br&gt;接下来需要在 &lt;code&gt;_config.yml&lt;/code&gt; 中配置一下，在 root 目录下的 &lt;code&gt;_config.yml&lt;/code&gt; 中添加：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Extensions&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Plugins: http://hexo.io/plugins/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plugins:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  hexo-generate-feed&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后在主题文件夹的 &lt;code&gt;_config.yml&lt;/code&gt; 中配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Set rss to false to disable feed link.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Leave rss as empty to use site&amp;apos;s feed link.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Set rss to specific value if you have burned your feed already.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rss: /atom.xml&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔记随笔" scheme="http://joveyzheng.com/categories/%E7%AC%94%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hexo" scheme="http://joveyzheng.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://joveyzheng.com/tags/NexT/"/>
    
      <category term="github" scheme="http://joveyzheng.com/tags/github/"/>
    
      <category term="博客" scheme="http://joveyzheng.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>React 入门实践</title>
    <link href="http://joveyzheng.com/2016/01/26/react-entry-practice/"/>
    <id>http://joveyzheng.com/2016/01/26/react-entry-practice/</id>
    <published>2016-01-26T01:43:59.000Z</published>
    <updated>2017-06-15T12:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在写这篇文章之前，我已经接触 React 有大半年了。在初步学习 React 之后就正式应用到项目中，当时就想把自己的一些想法写出来分享一下，无奈不太会写文章，再则时间不是很充裕，所以也就搁下了。<br>本篇文章比较基础，没有深入的分析，大神们轻看。废话就不多说了，那么让我们来进入正题。</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>首先想要介绍的是 React，看到这篇文章的朋友想必都有一些关于 React 的了解了，但对于刚接触的新人而言，在这就要简要地介绍一下了。然后就是关于使用 React 构建一个简单单页应用（下文用 SPA 代替，Single Page Application）的一些介绍和讲解。</p>
<h2 id="关于-React"><a href="#关于-React" class="headerlink" title="关于 React"></a>关于 React</h2><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。（<a href="http://baike.baidu.com/item/react/18077599#viewPageContent" target="_blank" rel="external">更多相关介绍请看这</a>）</p>
<p>特点：</p>
<ul>
<li><strong>仅仅只是 UI</strong></li>
<li><strong>虚拟 DOM</strong>：最大限度减少与 DOM 的交互（类似于使用 jQuery 操作 DOM）</li>
<li><strong>单向数据流</strong>：很大程度减少了重复代码的使用</li>
</ul>
<p>组件化：</p>
<ul>
<li>可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件</li>
<li>可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景</li>
<li>可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li>
</ul>
<a id="more"></a>
<p>生命周期：</p>
<ul>
<li>Mounting：已插入真实 DOM</li>
<li>Updating：正在被重新渲染</li>
<li>Unmounting：已移出真实 DOM</li>
</ul>
<p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p>
<ul>
<li>componentWillMount()</li>
<li>componentDidMount()</li>
<li>componentWillUpdate(object nextProps, object nextState)</li>
<li>componentDidUpdate(object prevProps, object prevState)</li>
<li>componentWillUnmount()</li>
</ul>
<p>此外，React 还提供两种特殊状态的处理函数。</p>
<ul>
<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>
<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>
</ul>
<h1 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h1><p>那么进入正题，花了点时间去写一个简单的 SPA，也算是一个比较完整 React 骨架，但不包括测试（测试的教程可以看<a href="http://www.jianshu.com/p/6c74c96148c9" target="_blank" rel="external">这个</a>），相关源码可以查看 <a href="https://github.com/jovey-zheng/react-start-kit" target="_blank" rel="external">react-start-kit</a>。</p>
<p>接下来看看我们这个项目的构建需要用到些什么：</p>
<ul>
<li>react</li>
<li>redux</li>
<li>webpack</li>
<li>react-router</li>
<li>ant design</li>
<li>babel<br>…</li>
</ul>
<p>还有一些没有列举出来，具体可以看仓库源码的 <a href="https://github.com/jovey-zheng/react-start-kit/blob/master/package.json" target="_blank" rel="external"><code>package.json</code></a>。其中的详细介绍会在文尾列出一些我所看过的文章或是官方介绍。</p>
<h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>说到 React 项目的构建就不得不提 Webpack 这个神器。构建工具有很多，例如 Grunt，Gulp，Brunch 等，相比这些构建工具，Webpack 感觉就是和 React 不谋而合，尤其是 <a href="https://github.com/gaearon/react-hot-loader" target="_blank" rel="external">react-hot-loader</a> 这样的神器（热加载），让 Webpack 成为最主流的 React 构建工具。</p>
<p>关于 Webpack 的特性以及介绍这里就不赘述了，我们可以从下图看出 Webpack 的作用：<br><img src="http://cdn4.infoqstatic.com/statics_s2_20160120-0059u2/resource/articles/react-and-webpack/zh/resources/0602005.jpg" alt=""></p>
<p>接着我们从项目代码中来看 Webpack。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">  app: [__dirname + &apos;/src/index&apos;],</div><div class="line">&#125;,</div><div class="line">output: &#123;</div><div class="line">  path: __dirname + &apos;/_dist&apos;,</div><div class="line">  filename: &apos;[name]_[hash].js&apos;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这部分主要是指定入口和出口文件。<code>entry</code> 作为项目的入口文件；<code>output</code> 作为文件编译后的出口，其中 <code>path</code> 代表输出的路径，<code>filename</code> 代表文件名称，而 <code>[name]_[hash]</code> 保证了浏览器不会存在缓存（即修改文件后效果不生效）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">  loaders: [&#123;</div><div class="line">    test: /\.js$/,</div><div class="line">    loaders: [&apos;babel&apos;],</div><div class="line">    exclude: /node_modules/,</div><div class="line">  &#125;, &#123;</div><div class="line">    test: /\.css$/,</div><div class="line">    loaders: [&apos;style&apos;, &apos;css&apos;],</div><div class="line">    include: /components/,</div><div class="line">  &#125;, &#123;</div><div class="line">    test: /\.(jpe?g|png|gif|svg|ico)/i,</div><div class="line">    loader: &apos;file&apos;,</div><div class="line">  &#125;, &#123;</div><div class="line">    test: /\.(ttf|eot|svg|woff|woff2)/,</div><div class="line">    loader: &apos;file&apos;,</div><div class="line">  &#125;, &#123;</div><div class="line">    test: /\.(pdf)/,</div><div class="line">    loader: &apos;file&apos;,</div><div class="line">  &#125;, &#123;</div><div class="line">    test: /\.(swf|xap)/,</div><div class="line">    loader: &apos;file&apos;,</div><div class="line">  &#125;],</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而这部分会帮助我们去处理不同类型的文件，其中 <code>test</code> 就是文件的后缀，<code>loaders</code> 是“转译器”，<code>include</code> 是指定文件的目录，<code>exclude</code> 是排除某个目录。我们可以看出，所有的 <code>.js</code> 文件都会通过 babel 去转译，也就是我们在项目中使用 ES6+ 语法会通过 babel 转译成浏览器可以识别的 ES5 代码。</p>
<p>最后配置好的 config 是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: [__dirname + &apos;/src/index&apos;],</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + &apos;/_dist&apos;,</div><div class="line">    filename: &apos;[name]_[hash].js&apos;,</div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    root: [</div><div class="line">      __dirname + &apos;/src&apos;,</div><div class="line">      __dirname + &apos;/node_modules&apos;,</div><div class="line">      __dirname,</div><div class="line">    ],</div><div class="line">    extensions: [&apos;&apos;, &apos;.js&apos;],</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    loaders: [&#123;</div><div class="line">      test: /\.js$/,</div><div class="line">      loaders: [&apos;babel&apos;],</div><div class="line">      exclude: /node_modules/,</div><div class="line">    &#125;, &#123;</div><div class="line">      test: /\.css$/,</div><div class="line">      loaders: [&apos;style&apos;, &apos;css&apos;],</div><div class="line">      include: /components/,</div><div class="line">    &#125;, &#123;</div><div class="line">      test: /\.(jpe?g|png|gif|svg|ico)/i,</div><div class="line">      loader: &apos;file&apos;,</div><div class="line">    &#125;, &#123;</div><div class="line">      test: /\.(ttf|eot|svg|woff|woff2)/,</div><div class="line">      loader: &apos;file&apos;,</div><div class="line">    &#125;, &#123;</div><div class="line">      test: /\.(pdf)/,</div><div class="line">      loader: &apos;file&apos;,</div><div class="line">    &#125;, &#123;</div><div class="line">      test: /\.(swf|xap)/,</div><div class="line">      loader: &apos;file&apos;,</div><div class="line">    &#125;],</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new HtmlWebpackPlugin(&#123;</div><div class="line">      template: __dirname + &apos;/src/index.html&apos;,</div><div class="line">      favicon: __dirname + &apos;/src/favicon.ico&apos;,</div><div class="line">      inject: false,</div><div class="line">    &#125;),</div><div class="line">  ],</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Express-服务器启动"><a href="#Express-服务器启动" class="headerlink" title="Express 服务器启动"></a>Express 服务器启动</h3><p>Node.js web 应用开发框架 Express 作为项目的 web 服务器，有 Node.js 开发经验的同学应该挺熟悉的了，这里也不多做赘述。</p>
<p>最终的启动代码是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;);</div><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">var webpackConfig = require(&apos;./webpack.development&apos;);</div><div class="line"></div><div class="line">var app = express();</div><div class="line">var compiler = webpack(webpackConfig);</div><div class="line"></div><div class="line">app.use(require(&apos;webpack-dev-middleware&apos;)(compiler, &#123;</div><div class="line">  stats: &#123;</div><div class="line">    colors: true,</div><div class="line">  &#125;,</div><div class="line">&#125;));</div><div class="line"></div><div class="line">app.use(require(&apos;webpack-hot-middleware&apos;)(compiler)); //热加载</div><div class="line"></div><div class="line">app.listen(process.env.PORT, function(err) &#123; //在没有端口的情况下，会自动给出一个随机端口</div><div class="line">  if (err) &#123;</div><div class="line">    console.log(err);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>为了方便我们的访问，项目使用了 <code>minihost</code> 进行启动，方便快捷。值得一提的是，使用 <code>h -- npm start</code> 命令启动时，访问的是项目文件夹的名称作为链接，例如项目叫 <code>myproject</code>，那么此时可以访问 <code>myproject.t.t</code>。</p>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>对于复杂的 SPA，状态（state）管理非常重要。state 可能包括：服务端的响应数据、本地对响应数据的缓存、本地创建的数据（比如，表单数据）以及一些 UI 的状态信息（比如，路由、选中的 tab、是否显示下拉列表、页码控制等等）。如果 state 变化不可预测，就会难于调试（state 不易重现，很难复现一些 bug）和不易于扩展（比如，优化更新渲染、服务端渲染、路由切换时获取数据等等）。</p>
<blockquote>
<p>state 为单一对象，使得 Redux 只需要维护一棵状态树，服务端很容易初始化状态，易于服务器渲染。state 只能通过 dispatch(action) 来触发更新，更新逻辑由 reducer 来执行。</p>
</blockquote>
<p>在使用 Redux 后，state 就变得很容易维护，而且数据流非常清晰，容易解决遇到的 BUG。</p>
<p>我们可以看下图来简要地理解 Redux：<br><img src="http://pic3.mojiax.com/mdimg/2016225/o_1acbp1n1r1qq9107d1enudoa15dtc.png" alt=""></p>
<p>我们可以在项目中看到的结构是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">├─store</div><div class="line">├─actions</div><div class="line">├─reducers</div><div class="line">├─constants</div><div class="line">├─helpers</div><div class="line">├─components</div><div class="line">├─app.js</div><div class="line">├─favicon.ico</div><div class="line">├─index.html</div><div class="line">├─index.js</div><div class="line">└─routes.js</div></pre></td></tr></table></figure></p>
<p>最终我们的 store 是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import &#123;createStore, applyMiddleware, combineReducers, compose&#125; from &apos;redux&apos;;</div><div class="line">import thunk from &apos;redux-thunk&apos;;</div><div class="line">import &#123;reduxReactRouter&#125; from &apos;redux-router&apos;;</div><div class="line">import createHistory from &apos;history/lib/createHashHistory&apos;;</div><div class="line"></div><div class="line">import routes from &apos;../routes&apos;;</div><div class="line">import * as reducers from &apos;../reducers&apos;;</div><div class="line"></div><div class="line">let middlewares = [thunk];</div><div class="line"></div><div class="line">if (process.env.NODE_ENV === &apos;development&apos;) &#123; //在开发环境下可以看到 state 的 log</div><div class="line">  const logger = require(&apos;redux-logger&apos;);</div><div class="line">  middlewares = [...middlewares, logger];</div><div class="line">&#125;</div><div class="line"></div><div class="line">const finalCreateStore = compose( //组合多个函数</div><div class="line">  applyMiddleware(...middlewares),</div><div class="line">  reduxReactRouter(&#123;routes, createHistory&#125;),</div><div class="line">)(createStore); //创建 store 来管理所有的 state</div><div class="line"></div><div class="line">export default function configureStore(initialState) &#123;</div><div class="line">  const reducer = combineReducers(reducers);  //把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数</div><div class="line">  const store = finalCreateStore(reducer, initialState);</div><div class="line"></div><div class="line">  if (process.env.NODE_ENV === &apos;development&apos; &amp;&amp; module.hot) &#123; //开发环境下的热加载</div><div class="line">    module.hot.accept(&apos;../reducers&apos;, () =&gt; &#123;</div><div class="line">      const nextReducers = require(&apos;../reducers&apos;);</div><div class="line">      const nextReducer = combineReducers(nextReducers);</div><div class="line">      store.replaceReducer(nextReducer);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return store;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取 state 需要在组件中调用 <code>connect</code> 函数，可以自行定义需要获取的 state。（这用于区分展示型和容器型组件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">@connect(</div><div class="line">  state =&gt; (&#123;</div><div class="line">    data: state.data</div><div class="line">  &#125;)</div><div class="line">)</div><div class="line">export default class ComponentOne extends Component &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：<code>connect</code> 必须紧跟 component 的定义，不然会报错。</p>
<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p>为项目添加路由系统，使用了 react-router 来管理路由。在开发项目的时候，比较推荐的做法是使用路由去跳转页面，并且创建 store 的同时我们就把 router 加入其中，然后我们根据路由的变化去更新视图。</p>
<p>我们可以看看路由的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import Route from &apos;react-router/lib/Route&apos;; //import &#123;Route&#125; from &apos;react-router&apos;;</div><div class="line">import Base from &apos;components/base/Base&apos;;</div><div class="line">import Home from &apos;components/home/Home&apos;;</div><div class="line"></div><div class="line">export default (</div><div class="line">  &lt;Route component=&#123;Base&#125;&gt;</div><div class="line">    &lt;Route path=&quot;/&quot; component=&#123;Home&#125; /&gt;</div><div class="line">    &lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><code>path</code> 是跳转路径，<code>component</code> 是与路径相匹配的组件。</p>
<h2 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h2><p>由蚂蚁金服技术部出品的一个 UI 设计语言，也是项目中所用到的 UI 组件库。</p>
<p>特性：</p>
<ul>
<li>Designed as Ant Design，提炼和服务企业级中后台产品的交互语言和视觉风格</li>
<li><a href="http://react-component.github.io/badgeboard/" target="_blank" rel="external">React Component</a> 上精心封装的高质量 UI 库</li>
<li>基于 npm + webpack + babel 的工作流，支持 ES2015</li>
</ul>
<p>选择理由：</p>
<ul>
<li>有很好的技术支持</li>
<li>简洁的样式</li>
<li>基本涵盖常用组件<br>…</li>
</ul>
<h2 id="简单的-Component"><a href="#简单的-Component" class="headerlink" title="简单的 Component"></a>简单的 Component</h2><p>组件作为 React 渲染的一个基本组成，我们通常把它们分为两类，<strong>容器型</strong>和<strong>展示型</strong>。相较于<strong>容器型</strong>，<strong>展示型</strong>是通过<strong>容器型</strong>传递 props 来获取数据，而<strong>容器型</strong>可以直接从 store 中获取，处理并传递给下级组件。</p>
<p>在实际应用中会发现，定义一个容器型组件负责处理数据，然后分发给下级展示型组件，当需要更新数据时，那么容器型组件发生变化会引起下级展示型组件的变化，这样就对我们业务上造成了一定的困扰（在不需要更新的部分组件上也发生了更新）。因此，我们选择在需要获取数据的组件中使用 <code>connect</code>，这样则会方便很多（感觉有些违反规则）。</p>
<p>在项目中我们会这么定义组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</div><div class="line">import Presentational from &apos;components/common/Presentational&apos;;</div><div class="line"></div><div class="line">@connect(</div><div class="line">  state =&gt; (&#123;</div><div class="line">    data: state.data</div><div class="line">  &#125;)</div><div class="line">)</div><div class="line">export default class Container extends Component &#123;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const &#123;data&#125; = this.props;</div><div class="line"></div><div class="line">    return (</div><div class="line">      &lt;Presentational data=&#123;data&#125; /&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面是可以从 store 获取数据的组件，并嵌套另一个组件，将数据传递给它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import React, &#123;Component, PropTypes&#125; from &apos;react&apos;;</div><div class="line"></div><div class="line">export default class Presentational extends Component &#123;</div><div class="line"></div><div class="line">  static propTypes = &#123;</div><div class="line">    data: PropTypes.string,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const &#123;data&#125; = this.props;</div><div class="line"></div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;data&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取上一个组件传递过来的数据，并展示出来。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是一篇科普文（哈哈~囧），并没有深入去分析各项技术的具体内容，希望能帮助刚入手 React 的新手们。实践项目的源码可以在 <a href="https://github.com/jovey-zheng/react-start-kit" target="_blank" rel="external">react-start-kit</a> 看到，你可以下载这个项目进行自己的一些探索和开发。还在努力探索中，文中有措辞不当或是疏漏，欢迎提出意见和建议。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://facebook.github.io/react/" target="_blank" rel="external">react 官网</a><br><a href="https://babeljs.io/" target="_blank" rel="external">Babel 官网</a><br><a href="http://segmentfault.com/a/1190000003503338?_ea=323420" target="_blank" rel="external">redux 介绍</a><br><a href="http://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">redux 中文文档</a><br><a href="http://ant.design/" target="_blank" rel="external">Ant design 官网</a><br><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 入门实例教程</a><br><a href="http://react-guide.github.io/react-router-cn/" target="_blank" rel="external">react-router 中文文档</a><br><a href="http://zhuanlan.zhihu.com/FrontendMagazine/20367175" target="_blank" rel="external">Webpack 傻瓜式指南（一）</a><br><a href="http://zhuanlan.zhihu.com/purerender/20495964" target="_blank" rel="external">CSS Modules 详解及 React 中实践</a><br><a href="http://www.cocoachina.com/webapp/20150721/12692.html" target="_blank" rel="external">一看就懂的 ReactJs 入门教程（精华版）</a><br><a href="http://www.infoq.com/cn/articles/react-and-webpack?utm_source=tuicool" target="_blank" rel="external">深入浅出React（二）：React开发神器Webpack</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在写这篇文章之前，我已经接触 React 有大半年了。在初步学习 React 之后就正式应用到项目中，当时就想把自己的一些想法写出来分享一下，无奈不太会写文章，再则时间不是很充裕，所以也就搁下了。&lt;br&gt;本篇文章比较基础，没有深入的分析，大神们轻看。废话就不多说了，那么让我们来进入正题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;首先想要介绍的是 React，看到这篇文章的朋友想必都有一些关于 React 的了解了，但对于刚接触的新人而言，在这就要简要地介绍一下了。然后就是关于使用 React 构建一个简单单页应用（下文用 SPA 代替，Single Page Application）的一些介绍和讲解。&lt;/p&gt;
&lt;h2 id=&quot;关于-React&quot;&gt;&lt;a href=&quot;#关于-React&quot; class=&quot;headerlink&quot; title=&quot;关于 React&quot;&gt;&lt;/a&gt;关于 React&lt;/h2&gt;&lt;p&gt;React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。（&lt;a href=&quot;http://baike.baidu.com/item/react/18077599#viewPageContent&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更多相关介绍请看这&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仅仅只是 UI&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟 DOM&lt;/strong&gt;：最大限度减少与 DOM 的交互（类似于使用 jQuery 操作 DOM）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单向数据流&lt;/strong&gt;：很大程度减少了重复代码的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组件化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件&lt;/li&gt;
&lt;li&gt;可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景&lt;/li&gt;
&lt;li&gt;可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React" scheme="http://joveyzheng.com/categories/React/"/>
    
    
      <category term="React" scheme="http://joveyzheng.com/tags/React/"/>
    
      <category term="入门" scheme="http://joveyzheng.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="实践" scheme="http://joveyzheng.com/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>React 测试驱动教程</title>
    <link href="http://joveyzheng.com/2016/01/21/test-driven-react-tutorial/"/>
    <id>http://joveyzheng.com/2016/01/21/test-driven-react-tutorial/</id>
    <published>2016-01-21T10:19:35.000Z</published>
    <updated>2017-06-15T12:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>测试是开发周期中的一个重要组成部分。没有测试的代码被称为：遗留代码。对于我而言，第一次学习 React 和 JavaScript 的时候，感到很有压力。如果你也是刚开始学习 JS/React，并加入他们的社区，那么也可能会有相同的感觉。想到的会是：</p>
<ul>
<li>我应该用哪一个构建工具？</li>
<li>哪一个测试框架比较好？</li>
<li>我应该学习哪种流模式？</li>
<li>我需要用到流吗？</li>
</ul>
<p>为了解决这些烦恼，我决定写这篇文章。经过几个小时的博客文章阅读，查阅 JS 开发者的源码，还有参加 Florida 的 JSConf，终于让我找到了自己的测试“槽”。开始让我觉得没有经过测试的 React 程序代码是如此的不标准和凌乱。我想活在一个没有这种感觉的世界，但后来想想，这是不对的。</p>
<p>本教程所有的代码都可以在我的 <a href="https://github.com/SpencerCDixon/react-testing-starter-kit" target="_blank" rel="external">github 仓库</a>中找到。</p>
<p>让我们开始吧！</p>
<a id="more"></a>
<h2 id="设置-Webpack"><a href="#设置-Webpack" class="headerlink" title="设置 Webpack"></a>设置 Webpack</h2><p>本教程不是一个教如何使用 webpack，所以我不会详细说，但重要的是要了解基本的东西。<br>Webpack 就像 Rails 中的 Assets Pipeline 一样。在基础层面上而言，在运行 react 应用时，<br>会在处理你的代码和服务的前后，只生成一个 <code>bundle.js</code> 在客户端。</p>
<p>因为它是一个非常强大的工具，所以我们会常常用到。在开始，Webpack 的功能可能会吓到你，<br>但我建议你坚持使用下去，一旦你了解了其中的原理，就会觉得得心应手。而你只需给它一个机会去表现。</p>
<p>通常我们不会喜欢那些我们不会的，或是害怕的。然而，一旦你克服初始不适并开始理解它，总会变得很有趣。事实上，这正是我对测试的感受。当开始时讨厌它，在熟悉后喜欢它 :-)</p>
<p>如果感兴趣，这里有一些资源来更多地了解关于 webpack：</p>
<ol>
<li><a href="https://christianalfoni.github.io/react-webpack-cookbook/Getting-started.html" target="_blank" rel="external">Webpack Cookbook</a>（使用的是 Babel 5，但对于学习 Webpack 的基本原理而言还是很有用的）</li>
<li><a href="http://blog.madewithlove.be/post/webpack-your-bags/" target="_blank" rel="external">Webpack 初学者可以看这篇文章</a></li>
<li><a href="https://github.com/petehunt/webpack-howto" target="_blank" rel="external">Pete Hunts 所写的 Webpack How-to</a></li>
</ol>
<blockquote>
<p><strong>注意</strong>：如果要持续随本教程实验，建议使用 Node 版本为 <code>v5.1.0</code>。当然版本 <code>&gt;4</code> 的也是可以的。</p>
</blockquote>
<p>首先，安装所有关于 webpack 和 babel 的依赖。Babel 是一个转译器，允许你在开发时使用 ES6（es2015）和 ES7 的特性，然后将这些代码转译成浏览器可以识别的 ES5 代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir tdd_react</div><div class="line">cd tdd_react</div><div class="line">npm init        # follow along with normal npm init to set up project</div><div class="line"></div><div class="line">npm i babel-loader babel-core webpack --save-dev</div></pre></td></tr></table></figure>
<blockquote>
<p><code>npm i</code> 是 npm install 的别名。</p>
</blockquote>
<p>接下来，让我们设置项目的路径和创建一个 <code>webpack.config.js</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir src                  # where all our source code will live</div><div class="line">touch src/main.js          # this will be the entry point for our webpack bundling</div><div class="line">mkdir test                 # place to store all our tests</div><div class="line">mkdir dist                 # this is where the bundled javascript from webpack will go</div><div class="line">touch webpack.config.js    # our webpack configuration file</div></pre></td></tr></table></figure>
<p>初始化的 webpack config 会很小。阅读这些注释，理解下发生了什么：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// our webpack.config.js file located in project root</div><div class="line"></div><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">var path = require(&apos;path&apos;);                // a useful node path helper library</div><div class="line"></div><div class="line">var config = &#123;</div><div class="line">  entry: [&apos;./src/main.js&apos;],                // the entry point for our app</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist&apos;), // store the bundled output in dist/bundle.js</div><div class="line">    filename: &apos;bundle.js&apos;                  // specifying file name for our compiled assets</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    loaders: [</div><div class="line">      // telling webpack which loaders we want to use.  For now just run the</div><div class="line">      // code through the babel-loader.  &apos;babel&apos; is an alias for babel-loader</div><div class="line">      &#123; test: /\.js$/, loaders: [&apos;babel&apos;], exclude: /node_modules/ &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure>
<p>为了让 babel 更好地工作，我们需要定义哪个 <code>presets</code> 是我们需要用到的。让我们继续，并且安装 React 和 ES6 预处理所需的东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i babel-preset-react babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure>
<p>现在我们有一些选项。在 webpack config 文件中，会告诉你哪一块是做 bebel 预处理的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">loaders: [</div><div class="line">  &#123;</div><div class="line">    test: /\.js$/,</div><div class="line">    loaders: [&apos;babel&apos;],</div><div class="line">    exclude: /node_modules/,</div><div class="line">    query: &#123;</div><div class="line">      presets: [&apos;react&apos;, &apos;es2015&apos;]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>另外的方法是将他们存在 <code>.babelrc</code> 文件中，这也用在我的项目中。将 babel 预处理存储在 <code>.babelrc</code> 中，对于以后的开发者而言，更容易去找到哪个 babel 预处理是可用的。此外，当我们将 Karma 设置到 webpack 之后，因为 <code>.babelrc</code> 文件的存在，我们就不再需要其他的预处理配置了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># inside our project root</div><div class="line">touch .babelrc</div></pre></td></tr></table></figure>
<p>将下面这段粘贴到预处理文件中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># .babelrc</div><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了确认它能否工作，让我们在 <code>main.js</code> 中加入一些 react 代码，并看看所有的包是否正常。接着安装 React 和 React DOM：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i react react-dom -S</div></pre></td></tr></table></figure>
<blockquote>
<p>使用 <code>-S</code> 是 <code>--save</code> 的别名。</p>
</blockquote>
<p>创建第一个 React 组件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># src/main.js</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">class Root extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;h1&gt; Hello World &lt;/h1&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render(&lt;Root /&gt;, document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>
<p>聪明的读者就会察觉我们并没有在根部创建一个 <code>index.html</code> 文件。让我们继续，当 <code>bundle.js</code> 编译后，将其放到 <code>/dist</code> 文件夹中：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># /dist/index.html</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>非常棒，让我们继续。最后，我们可以运行 webpack，看看一切是否正常。如果你没有全局安装 webpack（<code>npm i webpack -g</code>），你也可以用 node modules 方式进行启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./node_modules/.bin/webpack</div></pre></td></tr></table></figure>
<p>Webpack 将默认情况下寻找一个配置名称为 <code>webpack.config.js</code>。如果你高兴，也可以通过不同 webpack config 作为参数传入。</p>
<p>在 package.json 中创建一个别名，来完成构建工作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># package.json</div><div class="line">... other stuff</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;build&quot;: &quot;webpack&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来让 <code>webpack-dev-server</code> 提升开发体验：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i webpack-dev-server --save-dev</div></pre></td></tr></table></figure>
<p>将 webpack dev server 的入口加入到 <code>webpack.config.js</code> 中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">... rest of config</div><div class="line">  entry: [</div><div class="line">    &apos;webpack/hot/dev-server&apos;,</div><div class="line">    &apos;webpack-dev-server/client?http://localhost:3000&apos;,</div><div class="line">    &apos;./src/main.js&apos;</div><div class="line">  ],</div><div class="line">... rest of config</div></pre></td></tr></table></figure>
<p>让 script 运行在开发服务器上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># package.json</div><div class="line">... other stuff</div><div class="line">scripts: &#123;</div><div class="line">  &quot;dev&quot;: &quot;webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist&quot;,</div><div class="line">  &quot;build&quot;: &quot;webpack&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 script 中使用了 <code>--content-base</code> 标记，告诉 webpack 我们想服务于 <code>/dist</code> 文件夹。我们还定义了 3000 端口，使得更像是 Rails 开发的体验。</p>
<p>最后，在 webpack 配置文件中添加一个 resolve 标记，使进口文件看起来更直观。下面就是配置文件最终的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">var config = &#123;</div><div class="line">  entry: [</div><div class="line">    &apos;webpack/hot/dev-server&apos;,</div><div class="line">    &apos;webpack-dev-server/client?http://localhost:3000&apos;,</div><div class="line">    &apos;./src/main.js&apos;</div><div class="line">  ],</div><div class="line">  resolve: &#123;</div><div class="line">    root: [</div><div class="line">      // allows us to import modules as if /src was the root.</div><div class="line">      // so I can do: import Comment from &apos;components/Comment&apos;</div><div class="line">      // instead of:  import Comment from &apos;../components/Comment&apos; or whatever relative path would be</div><div class="line">      path.resolve(__dirname, &apos;./src&apos;)</div><div class="line">    ],</div><div class="line">    // allows you to require without the .js at end of filenames</div><div class="line">    // import Component from &apos;component&apos; vs. import Component from &apos;component.js&apos;</div><div class="line">    extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.jsx&apos;]</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">    filename: &apos;bundle.js&apos;</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: /\.js?$/,</div><div class="line">        // dont run node_modules or bower_components through babel loader</div><div class="line">        exclude: /(node_modules|bower_components)/,</div><div class="line">        // babel is alias for babel-loader</div><div class="line">        // npm i babel-core babel-loader --save-dev</div><div class="line">        loader: &apos;babel&apos;</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure>
<p>为确保一切工作正常，让我们运行开发服务器，并且确认我们在屏幕上看到 “Hello World”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm run dev</div><div class="line">open http://localhost:3000</div></pre></td></tr></table></figure>
<p>你应该看到的是这样的：</p>
<p><img src="http://i.imgur.com/rYTjH77.png?1" alt="Hello World Image"></p>
<h2 id="设置-Mocha，Chai，Sinon-和-Enzyme"><a href="#设置-Mocha，Chai，Sinon-和-Enzyme" class="headerlink" title="设置 Mocha，Chai，Sinon 和 Enzyme"></a>设置 Mocha，Chai，Sinon 和 Enzyme</h2><p><strong>Mocha</strong>：将用于运行我们的测试。<br><strong>Chai</strong>：是我们期待的库。应用非常广泛，允许使用 RSpec 一样的语法。<br><strong>Sinon</strong>：将服务于 mocks/stubs/spies.<br><strong>Enzyme</strong>：将用于测试我们的 React components。AirBnB 写的一个很漂亮的测试库。</p>
<p>安装这些包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i mocha chai sinon --save-dev</div></pre></td></tr></table></figure>
<p>如果我们希望能够使用 ES6 编写测试，那么我们需要在运行前对代码进行转译。那么我们需要安装 babel-register：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i babel-register --save-dev</div></pre></td></tr></table></figure>
<p>加一些 npm scripts 到 <code>package.json</code> 中，让测试更简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ./package.json</div><div class="line">... rest of package.json</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;mocha --compilers js:babel-register --recursive&quot;,</div><div class="line">    &quot;test:watch&quot;: &quot;npm test -- --watch&quot;,</div><div class="line">    &quot;build&quot;: &quot;webpack&quot;,</div><div class="line">    &quot;dev&quot;: &quot;webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist&quot;,</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>我们的测试脚本要运行 mocha，并使用 <code>babel-register</code> 进行转译，然后递归地查看 <code>/test</code> 目录。</p>
<p>最终，我们需要设置 Karma，因此 npm script 会变得无效，但如果不设置，它将会正常工作。<code>npm run test:watch</code> 将会监视程序，并在文件发生修改时重新运行。多么高效！</p>
<p>确认它能工作，创建一个 hello world 测试 <code>/tests/helloWorld.spec.js</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># /test/helloWorld.spec.js</div><div class="line">import &#123; expect &#125; from &apos;chai&apos;;</div><div class="line"></div><div class="line">describe(&apos;hello world&apos;, () =&gt; &#123;</div><div class="line">  it(&apos;works!&apos;, () =&gt; &#123;</div><div class="line">    expect(true).to.be.true;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>哇…看起来很像 RSpec！</p>
<p>如果每一个测试都要引入 <code>expect</code>，这将变得很麻烦，因此让我们新建一个 <code>test_helper</code> 文件来保存这些东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># /test/test_helper.js</div><div class="line">import &#123; expect &#125; from &apos;chai&apos;;</div><div class="line">import sinon from &apos;sinon&apos;;</div><div class="line"></div><div class="line">global.expect = expect;</div><div class="line">global.sinon = sinon;</div></pre></td></tr></table></figure>
<p>然后把它包括到 npm 脚本的运行套件中，并通过 <code>--require ./test/test_helper.js</code> 来声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># package.json script section</div><div class="line">  &quot;test&quot;: &quot;mocha --compilers js:babel-register --require ./test/test_helper.js --recursive&quot;,</div></pre></td></tr></table></figure>
<p>我也添加了 sinon，因此它也可以全局可用。现在无论什么时候，我们在写一个新的测试时，都不需要手动引入 <code>expect</code> 和 <code>sinon</code>。</p>
<h3 id="Enzyme"><a href="#Enzyme" class="headerlink" title="Enzyme"></a>Enzyme</h3><p>现在我们所需的“普通”测试工具都已经设置好了（mocha，chai，sinon），接着让我们安装 Enzyme，并且开始测试 React component！</p>
<p>安装这个包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i enzyme react-addons-test-utils --save-dev</div></pre></td></tr></table></figure>
<p>Enzyme 的重要文档可以<a href="http://airbnb.io/enzyme/" target="_blank" rel="external">在这里找到</a>。如果有时间，我推荐阅读 Shallow Rendering 部分。</p>
<blockquote>
<p><strong>你会问，什么是 Shallow Rendering？</strong></p>
</blockquote>
<p>对我们来说是一种组件调用 render 方法，得到我们可以断言的 React 元素，而无需实际安装组件到 DOM 上。更多的 React 元素<a href="https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="external">请看这</a>。</p>
<p>Enzyme 会将 shallow rendered 组件包裹进一个特殊的 <code>wrapper</code> 中，进而让我们可以测试。如果你用过 Rails，这看起来像是 Capybara 中的 <code>page</code> 对象。</p>
<p>让我们为一些合适的 <code>&lt;Root /&gt;</code> 组件进行 TDD 的驱动开发。</p>
<p>这个 Root 组件会是一个 <code>container</code>，意味着在应用中它可以控制 state 的处理。学习 React 中“智能”和“笨拙”组件之间的差异，对于应用程序体系结构是很重要的。<a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.8cnl19w8l" target="_blank" rel="external">这篇文章很好地解释了它们</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># /tests/containers/Root.spec.js</div><div class="line"></div><div class="line">import React from &apos;react&apos;;                     // required to get test to work.  we can get around this later with more configuration</div><div class="line">import &#123; shallow &#125; from &apos;enzyme&apos;;              // method from enzyme which allows us to do shallow render</div><div class="line">import Root from &apos;../../src/containers/Root&apos;;  // import our soon to be component</div><div class="line"></div><div class="line">describe(&apos;(Container) Root&apos;, () =&gt; &#123;</div><div class="line">  it(&apos;renders as a &lt;div&gt;&apos;, () =&gt; &#123;</div><div class="line">    const wrapper = shallow(&lt;Root /&gt;);</div><div class="line">    expect(wrapper.type()).to.eql(&apos;div&apos;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(&apos;has style with height 100%&apos;, () =&gt; &#123;</div><div class="line">    const wrapper = shallow(&lt;Root /&gt;);</div><div class="line">    const expectedStyles = &#123;</div><div class="line">      height: &apos;100%&apos;,</div><div class="line">      background: &apos;#333&apos;</div><div class="line">    &#125;</div><div class="line">    expect(wrapper.prop(&apos;style&apos;)).to.eql(expectedStyles);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(&apos;contains a header explaining the app&apos;, () =&gt; &#123;</div><div class="line">    const wrapper = shallow(&lt;Root /&gt;);</div><div class="line">    expect(wrapper.find(&apos;.welcome-header&apos;)).to.have.length(1);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果我们用 <code>npm test</code> 运行测试，这会失败。因为我们没有在适当的位置创建一个根组件。因此我们可以这样做：</p>
<blockquote>
<p>如果在任何时候你想看到这段代码的源代码，可以在 <a href="https://github.com/SpencerCDixon/react-testing-starter-kit" target="_blank" rel="external">github 仓库</a> 中找到</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># /src/containers/Root.js</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line"></div><div class="line">const styles = &#123;</div><div class="line">  height: &apos;100%&apos;,</div><div class="line">  background: &apos;#333&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Root extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div style=&#123;styles&#125;&gt;</div><div class="line">        &lt;h1 className=&apos;welcome-header&apos;&gt;Welcome to testing React!&lt;/h1&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Root;</div></pre></td></tr></table></figure>
<p>重新运行测试就可以了。</p>
<p>在我们的测试中有很多重复的东西，因此我们还需要回去做一些重构。由于我们没有给 <code>Root</code> 传入任何的 props，那么我们可以 shallow render 它一次，然后就在一个 wrapper 中结束了我们所有的断言。很多时候给定一个特定的 props 后，我发现自己包装的部分测试会在 “sub” describe 块中，然后给一堆断言也有这些 props。如果你用过 RSpec，就类似于使用 “context” 块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">describe(&apos;(Container) Root&apos;, () =&gt; &#123;</div><div class="line">  const wrapper = shallow(&lt;Root /&gt;);</div><div class="line"></div><div class="line">  it(&apos;renders as a &lt;div&gt;&apos;, () =&gt; &#123;</div><div class="line">    expect(wrapper.type()).to.eql(&apos;div&apos;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(&apos;has style with height 100%&apos;, () =&gt; &#123;</div><div class="line">    const expectedStyles = &#123;</div><div class="line">      height: &apos;100%&apos;,</div><div class="line">      background: &apos;#333&apos;</div><div class="line">    &#125;</div><div class="line">    expect(wrapper.prop(&apos;style&apos;)).to.eql(expectedStyles);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(&apos;contains a header explaining the app&apos;, () =&gt; &#123;</div><div class="line">    expect(wrapper.find(&apos;.welcome-header&apos;)).to.have.length(1);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>尽可能地在你的测试中使用 <code>shallow</code>，但偶尔也可能不用。例如，如果你要测试 React 生命周期的方法时，就需要真正地将组件安装出来。</p>
<p>接下来让我们测试一个组件的安装和调用函数，当它安装时，我们可以得到一些暴露在 <code>sinon</code> 上的信息和正在使用的 spies。</p>
<p>我们可以假装 <code>Root</code> 组件有一个子组件叫 <code>CommentList</code>，在安装后将调用任意的回调。当通过给定 props 组件安装时，函数被调用，因此我们就可以测试这个场景。在组件渲染时给评论列表一些 style，然后我们就可以知道 shallow render 是如何处理这些样式的了。<code>CommentList</code> 会在一个组件文件夹的 <code>/src/components/CommentList.js</code> 中。因为它不处理数据，因此完全取决于 props，换句话说它是一个<strong>纯</strong>（<strong>笨拙</strong>）组件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">// Once we set up Karma to run our tests through webpack</div><div class="line">// we will no longer need to have these long relative paths</div><div class="line">import CommentList from &apos;../../src/components/CommentList&apos;;</div><div class="line">import &#123;</div><div class="line">  describeWithDOM,</div><div class="line">  mount,</div><div class="line">  shallow,</div><div class="line">  spyLifecycle</div><div class="line">&#125; from &apos;enzyme&apos;;</div><div class="line"></div><div class="line">describe(&apos;(Component) CommentList&apos;, () =&gt; &#123;</div><div class="line"></div><div class="line">  // using special describeWithDOM helper that enzyme</div><div class="line">  // provides so if other devs on my team don&apos;t have JSDom set up</div><div class="line">  // properly or are using old version of node it won&apos;t bork their test suite</div><div class="line">  //</div><div class="line">  // All of our tests that depend on mounting should go inside one of these</div><div class="line">  // special describe blocks</div><div class="line">  describeWithDOM(&apos;Lifecycle methods&apos;, () =&gt; &#123;</div><div class="line">    it(&apos;calls componentDidMount&apos;, () =&gt; &#123;</div><div class="line">      spyLifecyle(CommentList);</div><div class="line"></div><div class="line">      const props = &#123;</div><div class="line">        onMount: () =&gt; &#123;&#125;,  // an anonymous function in ES6 arrow syntax</div><div class="line">        isActive: false</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      // using destructuring to pass props down</div><div class="line">      // easily and then mounting the component</div><div class="line">      mount(&lt;CommentList &#123;...props&#125; /&gt;);</div><div class="line"></div><div class="line">      // CommentList&apos;s componentDidMount should have been</div><div class="line">      // called once.  spyLifecyle attaches sinon spys so we can</div><div class="line">      // make this assertion</div><div class="line">      expect(</div><div class="line">        CommentList.prototype.componentDidMount.calledOnce</div><div class="line">      ).to.be.true;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    it(&apos;calls onMount prop once it mounts&apos;, () =&gt; &#123;</div><div class="line">      // create a spy for the onMount function</div><div class="line">      const props = &#123; onMount: sinon.spy() &#125;;</div><div class="line"></div><div class="line">      // mount our component</div><div class="line">      mount(&lt;CommentList &#123;...props&#125; /&gt;);</div><div class="line"></div><div class="line">      // expect that onMount was called</div><div class="line">      expect(props.onMount.calledOnce).to.be.true;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>还有很多，阅读这些注释可以帮助你更好地理解。看看这些实践，让测试可以通过，然后再回头看看这些测试，验证下你所理解的东西。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># /src/components/CommentList.js</div><div class="line">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;;</div><div class="line"></div><div class="line">const propTypes = &#123;</div><div class="line">  onMount: PropTypes.func.isRequired,</div><div class="line">  isActive: PropTypes.bool</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class CommentList extends Component &#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    this.props.onMount();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li&gt; Comment One &lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">CommentList.propTypes = propTypes;</div><div class="line">export default CommentList;</div></pre></td></tr></table></figure>
<p>运行 <code>npm test</code> ，现在这些套件应该可以通过测试了。</p>
<p>接下来让我们添加一些 shallow rendered 测试，当给定一个 <code>isActive</code> 的 props 时，来确保我们的组件使用了适当的 CSS class。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">... previous tests</div><div class="line"></div><div class="line">  it(&apos;should render as a &lt;ul&gt;&apos;, () =&gt; &#123;</div><div class="line">    const props = &#123; onMount: () =&gt; &#123;&#125; &#125;;</div><div class="line">    const wrapper = shallow(&lt;CommentList  &#123;...props&#125; /&gt;);</div><div class="line">    expect(wrapper.type()).to.eql(&apos;ul&apos;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  describe(&apos;when active...&apos;, () =&gt; &#123;</div><div class="line">    const wrapper = shallow(</div><div class="line">      // just passing isActive is an alias for true</div><div class="line">      &lt;CommentList onMount=&#123;() =&gt; &#123;&#125;&#125; isActive /&gt;</div><div class="line">    )</div><div class="line">    it(&apos;should render with className active-list&apos;, () =&gt; &#123;</div><div class="line">      expect(wrapper.prop(&apos;className&apos;)).to.eql(&apos;active-list&apos;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  describe(&apos;when inactive...&apos;, () =&gt; &#123;</div><div class="line">    const wrapper = shallow(</div><div class="line">      &lt;CommentList onMount=&#123;() =&gt; &#123;&#125;&#125; isActive=&#123;false&#125; /&gt;</div><div class="line">    )</div><div class="line">    it(&apos;should render with className inactive-list&apos;, () =&gt; &#123;</div><div class="line">      expect(wrapper.prop(&apos;className&apos;)).to.eql(&apos;inactive-list&apos;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>让它们通过测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class CommentList extends Component &#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    this.props.onMount();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const &#123; isActive &#125; = this.props;</div><div class="line">    const className = isActive ? &apos;active-list&apos; : &apos;inactive-list&apos;;</div><div class="line"></div><div class="line">    return (</div><div class="line">      &lt;ul className=&#123;className&#125;&gt;</div><div class="line">        &lt;li&gt; Comment One &lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时你应该对如何测试 react 组件已经有了一个很好的理解了。记得去阅读 Enzyme 文档来获得更多的灵感。</p>
<h2 id="设置-Karma"><a href="#设置-Karma" class="headerlink" title="设置 Karma"></a>设置 Karma</h2><p>设置 Karma 可能会有些困难。坦白讲，这对我而言也是一件痛苦的工作。通常，当我开发 React 应用时，我会选择使用已经构建好的 starter kit，方便省事。<a href="https://github.com/davezuko/react-redux-starter-kit" target="_blank" rel="external">我非常推荐开发时用的 starter kit</a>。</p>
<p>使用 Karma 的价值在于快速测试重载，可以多浏览器测试和最重要的是 webpack 预处理。一旦我们将 Karma 设置好了，在我们运行测试程序时，不仅是只有 <code>babel-loader</code>，而是整个 webpack config。这为我们提供了很多便利，使得我们的测试环境与开发环境相同。</p>
<p>让我们开始吧…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">npm i karma karma-chai karma-mocha karma-webpack --save-dev</div><div class="line">npm i karma-sourcemap-loader karma-phantomjs-launcher --save-dev</div><div class="line">npm i karma-spec-reporter --save-dev</div><div class="line">npm i phantomjs --save-dev</div><div class="line"></div><div class="line"># The polyfills arn&apos;t required but will help with browser support issues</div><div class="line"># and are easy enough to include in our karma config that I figured why not</div><div class="line">npm i babel-polyfill phantomjs-polyfill --save-dev</div></pre></td></tr></table></figure>
<p>很多包，我知道。相信我完成这个是非常值得的。</p>
<p>对于我们的示例而言，我们将使用 <a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a>。没有别的什么原因，这我在 starter kit 中已经用到了。可以按照自己的喜好使用 Chrome，Firefox 或是 Safari，甚至在 PhantomJS 之上。（这是用 Karma 的一件很酷的事）</p>
<p>在配置 karma 之前先安装 <code>yargs</code>，它能让你使用命令行参数来定制 Karma 的配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i yargs -S</div></pre></td></tr></table></figure>
<p>现在我们可以通过创建一个 Karma config 文件去监视我们的文件，当文件发生修改时重新运行并很快地保存。</p>
<p><strong>Karma Config</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch karma.config.js</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">// ./karma.config.js</div><div class="line"></div><div class="line">var argv = require(&apos;yargs&apos;).argv;</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">module.exports = function(config) &#123;</div><div class="line">  config.set(&#123;</div><div class="line">    // only use PhantomJS for our &apos;test&apos; browser</div><div class="line">    browsers: [&apos;PhantomJS&apos;],</div><div class="line"></div><div class="line">    // just run once by default unless --watch flag is passed</div><div class="line">    singleRun: !argv.watch,</div><div class="line"></div><div class="line">    // which karma frameworks do we want integrated</div><div class="line">    frameworks: [&apos;mocha&apos;, &apos;chai&apos;],</div><div class="line"></div><div class="line">    // displays tests in a nice readable format</div><div class="line">    reporters: [&apos;spec&apos;],</div><div class="line"></div><div class="line">    // include some polyfills for babel and phantomjs</div><div class="line">    files: [</div><div class="line">      &apos;node_modules/babel-polyfill/dist/polyfill.js&apos;,</div><div class="line">      &apos;./node_modules/phantomjs-polyfill/bind-polyfill.js&apos;,</div><div class="line">      &apos;./test/**/*.js&apos; // specify files to watch for tests</div><div class="line">    ],</div><div class="line">    preprocessors: &#123;</div><div class="line">      // these files we want to be precompiled with webpack</div><div class="line">      // also run tests throug sourcemap for easier debugging</div><div class="line">      [&apos;./test/**/*.js&apos;]: [&apos;webpack&apos;, &apos;sourcemap&apos;]</div><div class="line">    &#125;,</div><div class="line">    // A lot of people will reuse the same webpack config that they use</div><div class="line">    // in development for karma but remove any production plugins like UglifyJS etc.</div><div class="line">    // I chose to just re-write the config so readers can see what it needs to have</div><div class="line">    webpack: &#123;</div><div class="line">       devtool: &apos;inline-source-map&apos;,</div><div class="line">       resolve: &#123;</div><div class="line">        // allow us to import components in tests like:</div><div class="line">        // import Example from &apos;components/Example&apos;;</div><div class="line">        root: path.resolve(__dirname, &apos;./src&apos;),</div><div class="line"></div><div class="line">        // allow us to avoid including extension name</div><div class="line">        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;],</div><div class="line"></div><div class="line">        // required for enzyme to work properly</div><div class="line">        alias: &#123;</div><div class="line">          &apos;sinon&apos;: &apos;sinon/pkg/sinon&apos;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      module: &#123;</div><div class="line">        // don&apos;t run babel-loader through the sinon module</div><div class="line">        noParse: [</div><div class="line">          /node_modules\/sinon\//</div><div class="line">        ],</div><div class="line">        // run babel loader for our tests</div><div class="line">        loaders: [</div><div class="line">          &#123; test: /\.js?$/, exclude: /node_modules/, loader: &apos;babel&apos; &#125;,</div><div class="line">        ],</div><div class="line">      &#125;,</div><div class="line">      // required for enzyme to work properly</div><div class="line">      externals: &#123;</div><div class="line">        &apos;jsdom&apos;: &apos;window&apos;,</div><div class="line">        &apos;cheerio&apos;: &apos;window&apos;,</div><div class="line">        &apos;react/lib/ExecutionEnvironment&apos;: true,</div><div class="line">        &apos;react/lib/ReactContext&apos;: &apos;window&apos;</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">    webpackMiddleware: &#123;</div><div class="line">      noInfo: true</div><div class="line">    &#125;,</div><div class="line">    // tell karma all the plugins we&apos;re going to be using to prevent warnings</div><div class="line">    plugins: [</div><div class="line">      &apos;karma-mocha&apos;,</div><div class="line">      &apos;karma-chai&apos;,</div><div class="line">      &apos;karma-webpack&apos;,</div><div class="line">      &apos;karma-phantomjs-launcher&apos;,</div><div class="line">      &apos;karma-spec-reporter&apos;,</div><div class="line">      &apos;karma-sourcemap-loader&apos;</div><div class="line">    ]</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>阅读所有的注释一次或两次有助于理解这个 config 是做什么的。使用 Webpack 的一大好处是全部都是普通的 JavaScript 代码，并且我们可以“重构”配置文件。事实上，这正是绝大多数 starter kit 所做的！</p>
<p>随着 Karma 设置完成，为运行测试，最后一件事就是要去更新我们的 package.json：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># package.json</div><div class="line">  &quot;scripts&quot; &#123;</div><div class="line">    &quot;test&quot;: &quot;node_modules/.bin/karma start karma.config.js&quot;,</div><div class="line">    &quot;test:dev&quot;: &quot;npm run test -- --watch&quot;,</div><div class="line">    &quot;old_test&quot;: &quot;mocha --compilers js:babel-register --require ./test/test_helper.js --recursive&quot;,</div><div class="line">    &quot;old_test:watch&quot;: &quot;npm test -- --watch&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>我建议重命名旧的测试 scripts 的前缀，用 ‘old_’ 表示。</p>
<p>最终的 <code>package.json</code> 是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;react-testing-starter-kit&quot;,</div><div class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;React starter kit with nice testing environment set up.&quot;,</div><div class="line">  &quot;main&quot;: &quot;src/main.js&quot;,</div><div class="line">  &quot;directories&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;tests&quot;,</div><div class="line">    &quot;src&quot;: &quot;src&quot;,</div><div class="line">    &quot;dist&quot;: &quot;dist&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;react&quot;: &quot;^0.14.6&quot;,</div><div class="line">    &quot;react-dom&quot;: &quot;^0.14.6&quot;,</div><div class="line">    &quot;yargs&quot;: &quot;^3.31.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;babel-core&quot;: &quot;^6.4.0&quot;,</div><div class="line">    &quot;babel-loader&quot;: &quot;^6.2.1&quot;,</div><div class="line">    &quot;babel-polyfill&quot;: &quot;^6.3.14&quot;,</div><div class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.3.13&quot;,</div><div class="line">    &quot;babel-preset-react&quot;: &quot;^6.3.13&quot;,</div><div class="line">    &quot;babel-register&quot;: &quot;^6.3.13&quot;,</div><div class="line">    &quot;chai&quot;: &quot;^3.4.1&quot;,</div><div class="line">    &quot;enzyme&quot;: &quot;^1.2.0&quot;,</div><div class="line">    &quot;json-loader&quot;: &quot;^0.5.4&quot;,</div><div class="line">    &quot;karma&quot;: &quot;^0.13.19&quot;,</div><div class="line">    &quot;karma-chai&quot;: &quot;^0.1.0&quot;,</div><div class="line">    &quot;karma-mocha&quot;: &quot;^0.2.1&quot;,</div><div class="line">    &quot;karma-phantomjs-launcher&quot;: &quot;^0.2.3&quot;,</div><div class="line">    &quot;karma-sourcemap-loader&quot;: &quot;^0.3.6&quot;,</div><div class="line">    &quot;karma-spec-reporter&quot;: &quot;0.0.23&quot;,</div><div class="line">    &quot;karma-webpack&quot;: &quot;^1.7.0&quot;,</div><div class="line">    &quot;mocha&quot;: &quot;^2.3.4&quot;,</div><div class="line">    &quot;phantomjs&quot;: &quot;^1.9.19&quot;,</div><div class="line">    &quot;phantomjs-polyfill&quot;: &quot;0.0.1&quot;,</div><div class="line">    &quot;react-addons-test-utils&quot;: &quot;^0.14.6&quot;,</div><div class="line">    &quot;sinon&quot;: &quot;^1.17.2&quot;,</div><div class="line">    &quot;webpack&quot;: &quot;^1.12.11&quot;,</div><div class="line">    &quot;webpack-dev-server&quot;: &quot;^1.14.1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;node_modules/.bin/karma start karma.config.js&quot;,</div><div class="line">    &quot;test:dev&quot;: &quot;npm run test -- --watch&quot;,</div><div class="line">    &quot;build&quot;: &quot;webpack&quot;,</div><div class="line">    &quot;dev&quot;: &quot;webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist&quot;,</div><div class="line">    &quot;old_test&quot;: &quot;mocha --compilers js:babel-register --require ./test/test_helper.js --recursive&quot;,</div><div class="line">    &quot;old_test:watch&quot;: &quot;npm test -- --watch&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;repository&quot;: &#123;</div><div class="line">    &quot;type&quot;: &quot;git&quot;,</div><div class="line">    &quot;url&quot;: &quot;tbd&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;Spencer Dixon&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在测试套件中外加 webpack 预处理，我们现在可以删除那些在测试内烦人的相对路径声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// test/containers/Root.spec.js</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import &#123; shallow &#125; from &apos;enzyme&apos;;</div><div class="line">import Root from &apos;containers/Root&apos;;               // new import statement</div><div class="line">// import Root from &apos;../../src/containers/Root&apos;;  // old import statement</div><div class="line"></div><div class="line">// test/components/CommentList.spec.js</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import CommentList from &apos;components/CommentList&apos;;               // new import statement</div><div class="line">// import CommentList from &apos;../../src/components/CommentList&apos;;  // old import statement</div><div class="line"></div><div class="line">import &#123;</div><div class="line">  describeWithDOM,</div><div class="line">  mount,</div><div class="line">  shallow,</div><div class="line">  spyLifecycle</div><div class="line">&#125; from &apos;enzyme&apos;;</div></pre></td></tr></table></figure>
<p>现在使用这个 starter kit 开发，你需要输入以下这些命令去运行程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm run dev         # note the addition of run</div><div class="line">npm run test:dev    # note the addition of run</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SpencerCDixon/react-testing-starter-kit" target="_blank" rel="external">如果还有什么不清楚的地方，可以在 github 上查看该源码</a>。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>我们已经建立了一个坚实的测试环境，可以根据你的项目具体需求去改变和发展。在下一次的文章中，我将花更多的时间在特殊场景的测试，还有如何测试 Redux，我更喜欢 flux 的实现。</p>
<p>虽然我只使用 React 开发了数月，但我已经爱上它了。我希望本教程可以帮助你更深入地理解一些 React 测试的最佳实践。有任何问题或评论随时联系我。测试是我们的好朋友！</p>
<p><a href="http://spencerdixon.com/blog/test-driven-react-tutorial.html?utm_campaign=Front%2BEnd%2BNewsletter&amp;utm_medium=email&amp;utm_source=Front_End_Newsletter_2" target="_blank" rel="external"><strong>原文链接</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试是开发周期中的一个重要组成部分。没有测试的代码被称为：遗留代码。对于我而言，第一次学习 React 和 JavaScript 的时候，感到很有压力。如果你也是刚开始学习 JS/React，并加入他们的社区，那么也可能会有相同的感觉。想到的会是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我应该用哪一个构建工具？&lt;/li&gt;
&lt;li&gt;哪一个测试框架比较好？&lt;/li&gt;
&lt;li&gt;我应该学习哪种流模式？&lt;/li&gt;
&lt;li&gt;我需要用到流吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这些烦恼，我决定写这篇文章。经过几个小时的博客文章阅读，查阅 JS 开发者的源码，还有参加 Florida 的 JSConf，终于让我找到了自己的测试“槽”。开始让我觉得没有经过测试的 React 程序代码是如此的不标准和凌乱。我想活在一个没有这种感觉的世界，但后来想想，这是不对的。&lt;/p&gt;
&lt;p&gt;本教程所有的代码都可以在我的 &lt;a href=&quot;https://github.com/SpencerCDixon/react-testing-starter-kit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github 仓库&lt;/a&gt;中找到。&lt;/p&gt;
&lt;p&gt;让我们开始吧！&lt;/p&gt;
    
    </summary>
    
      <category term="好文分享" scheme="http://joveyzheng.com/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="译文" scheme="http://joveyzheng.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="React" scheme="http://joveyzheng.com/tags/React/"/>
    
      <category term="JavaScript" scheme="http://joveyzheng.com/tags/JavaScript/"/>
    
      <category term="Tutorial" scheme="http://joveyzheng.com/tags/Tutorial/"/>
    
      <category term="Testing" scheme="http://joveyzheng.com/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>20 个交互非常棒的按钮代码</title>
    <link href="http://joveyzheng.com/2015/12/24/20-code-snippets-for-interactive-buttons/"/>
    <id>http://joveyzheng.com/2015/12/24/20-code-snippets-for-interactive-buttons/</id>
    <published>2015-12-24T01:57:22.000Z</published>
    <updated>2017-06-15T11:53:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>你能想象网页中没有按钮吗？我打赌你不会。在网页中，拥有按钮并不奇怪，这些看似很小、主要以矩形表现（如导航栏，版权信息）的东西，其实是网页 UI 中基础之一。它们不仅使链接看起来更有分量、吸引人和鲜明，而且他们还能提高跳转率和用户体验，使之更方便和直观。这些 CTA （Call-to-action：行为召唤）能帮你获得更多的潜在客户和促进业务的扩展。</p>
<p><img src="http://www.noupe.com/wp-content/uploads/2015/10/codesnippets-buttons-teaser_EN.jpg" alt="HOST"></p>
<p>按钮的开发需要注意它的形状、颜色、空间、排版和前景，这些都很重要。前四个主要是依赖于网页的主题，而最后一个则是取决于你需要达成的目标。例如，你可以在用户点击后，等待的时间里在按钮上加入转轮点亮的动画；又或是，加入一些更吸引眼球的动画效果。如此一来，添加动画效果可以使按钮产生的效果最大化。那么，接下来为你介绍这 20 个很棒的按钮代码，它们能使按钮更加丰富，且用户体验超好。</p>
<h1 id="波浪形按钮"><a href="#波浪形按钮" class="headerlink" title="波浪形按钮"></a><a href="http://codepen.io/suez/pen/aOgMxy" target="_blank" rel="external">波浪形按钮</a></h1><p><a href="http://codepen.io/suez/pen/aOgMxy" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/blobs-button.png"><br></a></p>
<p><strong>作者</strong>：Nikolay Talanov</p>
<a id="more"></a>
<h1 id="用-Canvas-和-HTML5-制作的粒子状按钮"><a href="#用-Canvas-和-HTML5-制作的粒子状按钮" class="headerlink" title="用 Canvas 和 HTML5 制作的粒子状按钮"></a><a href="http://codepen.io/igcorreia/pen/vEzmyV" target="_blank" rel="external">用 Canvas 和 HTML5 制作的粒子状按钮</a></h1><p><a href="http://codepen.io/igcorreia/pen/vEzmyV" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/particle-button.png"><br></a></p>
<p><strong>作者</strong>：Ignacio Correia</p>
<h1 id="用-Sass-制作的胶状按钮"><a href="#用-Sass-制作的胶状按钮" class="headerlink" title="用 Sass 制作的胶状按钮"></a><a href="http://codepen.io/macreart/pen/mdCHA" target="_blank" rel="external">用 Sass 制作的胶状按钮</a></h1><p><a href="http://codepen.io/macreart/pen/mdCHA" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/gelatin-over-button-effect.png"><br></a></p>
<p><strong>作者</strong>：François Lesenne</p>
<h1 id="3D-弹出效果的按钮"><a href="#3D-弹出效果的按钮" class="headerlink" title="3D 弹出效果的按钮"></a><a href="http://codepen.io/ashleynolan/pen/djpCG" target="_blank" rel="external">3D 弹出效果的按钮</a></h1><p><a href="http://codepen.io/ashleynolan/pen/djpCG" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/3d-paper-button.png"><br></a></p>
<p><strong>作者</strong>：Ashley Nolan</p>
<h1 id="“Material-Design”-CSS-动画效果的按钮"><a href="#“Material-Design”-CSS-动画效果的按钮" class="headerlink" title="“Material Design” CSS 动画效果的按钮"></a><a href="http://codepen.io/jonbrennecke/pen/xbojLg" target="_blank" rel="external">“Material Design” CSS 动画效果的按钮</a></h1><p><a href="http://codepen.io/jonbrennecke/pen/xbojLg" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/material-design-button-effect.png"><br></a></p>
<p><strong>作者</strong>：Jon Brennecke</p>
<h1 id="具有-3D-效果的按钮"><a href="#具有-3D-效果的按钮" class="headerlink" title="具有 3D 效果的按钮"></a><a href="http://codepen.io/drus/pen/IKzqG" target="_blank" rel="external">具有 3D 效果的按钮</a></h1><p><a href="http://codepen.io/drus/pen/IKzqG" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/3d-button.png"><br></a></p>
<p><strong>作者</strong>：drus unlimited</p>
<h1 id="关闭按钮效果"><a href="#关闭按钮效果" class="headerlink" title="关闭按钮效果"></a><a href="http://codepen.io/JonasB/pen/MYaMBz" target="_blank" rel="external">关闭按钮效果</a></h1><p><a href="http://codepen.io/JonasB/pen/MYaMBz" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/close-button-ui.png"><br></a></p>
<p><strong>作者</strong>：Jonas Badalic</p>
<h1 id="一些时尚的切换效果按钮"><a href="#一些时尚的切换效果按钮" class="headerlink" title="一些时尚的切换效果按钮"></a><a href="http://codepen.io/ashleynolan/pen/wBppKz" target="_blank" rel="external">一些时尚的切换效果按钮</a></h1><p><a href="http://codepen.io/ashleynolan/pen/wBppKz" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/funky-toggle-buttons.png"><br></a></p>
<p><strong>作者</strong>：Ashley Nolan</p>
<h1 id="纯-CSS3-效果的按钮"><a href="#纯-CSS3-效果的按钮" class="headerlink" title="纯 CSS3 效果的按钮"></a><a href="http://codepen.io/overlyenginnered/pen/myZVYv" target="_blank" rel="external">纯 CSS3 效果的按钮</a></h1><p><a href="http://codepen.io/overlyenginnered/pen/myZVYv" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/pure-css-button-effects.png"><br></a></p>
<p><strong>作者</strong>：Overly Engineered</p>
<h1 id="Hover-效果"><a href="#Hover-效果" class="headerlink" title="Hover 效果"></a><a href="http://codepen.io/deep1808/pen/aOQqqa" target="_blank" rel="external">Hover 效果</a></h1><p><a href="http://codepen.io/deep1808/pen/aOQqqa" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/elegant-hover-effect.png"><br></a></p>
<p><strong>作者</strong>：Deep</p>
<h1 id="Jelly-按钮"><a href="#Jelly-按钮" class="headerlink" title="Jelly 按钮"></a><a href="http://codepen.io/ayamflow/pen/Dufxr" target="_blank" rel="external">Jelly 按钮</a></h1><p><a href="http://codepen.io/ayamflow/pen/Dufxr" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/jelly-button.png"><br></a></p>
<p><strong>作者</strong>：ayamflow</p>
<h1 id="Hover-效果的按钮"><a href="#Hover-效果的按钮" class="headerlink" title="Hover 效果的按钮"></a><a href="http://codepen.io/thejamespower/pen/OVNYLL" target="_blank" rel="external">Hover 效果的按钮</a></h1><p><a href="http://codepen.io/thejamespower/pen/OVNYLL" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/button-hover-effects.png"><br></a></p>
<p><strong>作者</strong>：James Power</p>
<h1 id="Gaming-Button-With-Hover-Effect"><a href="#Gaming-Button-With-Hover-Effect" class="headerlink" title="Gaming Button With Hover Effect"></a><a href="http://codepen.io/kaigth/pen/qiDJL" target="_blank" rel="external">Gaming Button With Hover Effect</a></h1><p><a href="http://codepen.io/kaigth/pen/qiDJL" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/hover-over-effect.png"><br></a></p>
<p><strong>作者</strong>：kaigth</p>
<h1 id="分享按钮"><a href="#分享按钮" class="headerlink" title="分享按钮"></a><a href="http://codepen.io/onediv/pen/dkFco" target="_blank" rel="external">分享按钮</a></h1><p><a href="http://codepen.io/onediv/pen/dkFco" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/share-button.png"><br></a></p>
<p><strong>作者</strong>：Vincent Durand</p>
<h1 id="Flipside"><a href="#Flipside" class="headerlink" title="Flipside"></a><a href="http://codepen.io/hakimel/pen/ZYRgwB" target="_blank" rel="external">Flipside</a></h1><p><a href="http://codepen.io/hakimel/pen/ZYRgwB" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/flipside.png"><br></a></p>
<p><strong>作者</strong>：Hakim El Hattab</p>
<h1 id="粒子按钮效果"><a href="#粒子按钮效果" class="headerlink" title="粒子按钮效果"></a><a href="http://codepen.io/timohausmann/pen/icCer" target="_blank" rel="external">粒子按钮效果</a></h1><p><a href="http://codepen.io/timohausmann/pen/icCer" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/button-with-particle-animation.png"><br></a></p>
<p><strong>作者</strong>：Timo Hausmann</p>
<h1 id="CSS3-按钮示例"><a href="#CSS3-按钮示例" class="headerlink" title="CSS3 按钮示例"></a><a href="http://codepen.io/volusion/pen/AgqBf" target="_blank" rel="external">CSS3 按钮示例</a></h1><p><a href="http://codepen.io/volusion/pen/AgqBf" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/ecommerce-buttons.png"><br></a></p>
<p><strong>作者</strong>：Volusion Services</p>
<h1 id="很棒的按钮样式和效果"><a href="#很棒的按钮样式和效果" class="headerlink" title="很棒的按钮样式和效果"></a><a href="http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/" target="_blank" rel="external">很棒的按钮样式和效果</a></h1><p><a href="http://tympanus.net/codrops/2015/02/26/inspiration-button-styles-effects/" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/series-of-button-effects.png"><br></a></p>
<p><strong>作者</strong>：Mary Lou</p>
<h1 id="创意按钮样式"><a href="#创意按钮样式" class="headerlink" title="创意按钮样式"></a><a href="http://tympanus.net/codrops/2013/06/13/creative-button-styles/" target="_blank" rel="external">创意按钮样式</a></h1><p><a href="http://tympanus.net/codrops/2013/06/13/creative-button-styles/" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/creative-buttons.png"><br></a></p>
<p><strong>作者</strong>：Mary Lou</p>
<h1 id="3D-动画效果的按钮"><a href="#3D-动画效果的按钮" class="headerlink" title="3D 动画效果的按钮"></a><a href="http://codepen.io/1forhlol/pen/VYrxOP" target="_blank" rel="external">3D 动画效果的按钮</a></h1><p><a href="http://codepen.io/1forhlol/pen/VYrxOP" target="_blank" rel="external"><br>  <img src="http://www.noupe.com/wp-content/uploads/2015/10/creative-3d-buttons.png"><br></a></p>
<p><strong>作者</strong>：Zachary Minner</p>
<p><a href="http://www.noupe.com/design/20-code-snippets-for-interactive-buttons-93374.html" target="_blank" rel="external"><strong>原文链接</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你能想象网页中没有按钮吗？我打赌你不会。在网页中，拥有按钮并不奇怪，这些看似很小、主要以矩形表现（如导航栏，版权信息）的东西，其实是网页 UI 中基础之一。它们不仅使链接看起来更有分量、吸引人和鲜明，而且他们还能提高跳转率和用户体验，使之更方便和直观。这些 CTA （Call-to-action：行为召唤）能帮你获得更多的潜在客户和促进业务的扩展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.noupe.com/wp-content/uploads/2015/10/codesnippets-buttons-teaser_EN.jpg&quot; alt=&quot;HOST&quot;&gt;&lt;/p&gt;
&lt;p&gt;按钮的开发需要注意它的形状、颜色、空间、排版和前景，这些都很重要。前四个主要是依赖于网页的主题，而最后一个则是取决于你需要达成的目标。例如，你可以在用户点击后，等待的时间里在按钮上加入转轮点亮的动画；又或是，加入一些更吸引眼球的动画效果。如此一来，添加动画效果可以使按钮产生的效果最大化。那么，接下来为你介绍这 20 个很棒的按钮代码，它们能使按钮更加丰富，且用户体验超好。&lt;/p&gt;
&lt;h1 id=&quot;波浪形按钮&quot;&gt;&lt;a href=&quot;#波浪形按钮&quot; class=&quot;headerlink&quot; title=&quot;波浪形按钮&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codepen.io/suez/pen/aOgMxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;波浪形按钮&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codepen.io/suez/pen/aOgMxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;  &lt;img src=&quot;http://www.noupe.com/wp-content/uploads/2015/10/blobs-button.png&quot;&gt;&lt;br&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;：Nikolay Talanov&lt;/p&gt;
    
    </summary>
    
      <category term="好文分享" scheme="http://joveyzheng.com/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="译文" scheme="http://joveyzheng.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="button" scheme="http://joveyzheng.com/tags/button/"/>
    
      <category term="interactive" scheme="http://joveyzheng.com/tags/interactive/"/>
    
      <category term="web" scheme="http://joveyzheng.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CSS 的使用中你可能不知道的 7 件事</title>
    <link href="http://joveyzheng.com/2015/12/22/css-facts/"/>
    <id>http://joveyzheng.com/2015/12/22/css-facts/</id>
    <published>2015-12-22T07:50:56.000Z</published>
    <updated>2017-06-15T11:54:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论你信不信，JavaScript 和 CSS 已经开始重叠，并为 CSS 增加了更多的功能。当我在写 <a href="https://davidwalsh.name/ways-css-javascript-interact" target="_blank" rel="external">CSS 与 JavaScript 交互中你可能不知道的 5 种方式</a>的时候，读者对于 CSS 与 JavaScript 已经重叠的事感到很惊讶。那么今天，我会着重为你介绍 7 个可以通过 CSS 完成的任务 —— 不使用 JavaScript 或图像处理！</p>
<h1 id="CSS-supports"><a href="#CSS-supports" class="headerlink" title="CSS @supports"></a><a href="https://davidwalsh.name/css-supports" target="_blank" rel="external">CSS @supports</a></h1><p>每个优秀的前端工程师都会在使用某个特性前测试一下，确保是否在浏览器中可以使用。而这类测试通常是由 JavaScript 完成的，当然，也有很多人用 Modernizr（拥有很多很好功能的测试工具）来测试特性。那么现在有一个 CSS 新的 API 可以让你去做特性测试：<a href="https://davidwalsh.name/css-supports" target="_blank" rel="external">@supports</a>，下面的例子将简单地教你如何使用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/* basic usage */</div><div class="line">@supports(prop:value) &#123;</div><div class="line">  /* more styles */</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* real usage */</div><div class="line">@supports (display: flex) &#123;</div><div class="line">  div &#123; display: flex; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* testing prefixes too */</div><div class="line">@supports (display: -webkit-flex) or</div><div class="line">          (display: -moz-flex) or</div><div class="line">          (display: flex) &#123;</div><div class="line"></div><div class="line">    section &#123;</div><div class="line">      display: -webkit-flex;</div><div class="line">      display: -moz-flex;</div><div class="line">      display: flex;</div><div class="line">      float: none;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>@supports 这个新的特性也有一个相对应的 JavaScript 方式，但这个特性还在实验阶段，希望我们可以很快用到！</p>
<h1 id="CSS-Filters"><a href="#CSS-Filters" class="headerlink" title="CSS Filters"></a><a href="https://davidwalsh.name/css-filters" target="_blank" rel="external">CSS Filters</a></h1><p>你可以写一个服务去修改图片的颜色，同时还可以把它卖给 Facebook 获得大量的钱！当然，写一个图片过滤器功能只是一个简单化的实现，并非一门科学。在 Mozilla 的第一周，我写了一个<a href="https://github.com/darkwing/fotofilter" target="_blank" rel="external">小的应用</a>（这让我赢了比赛，BTW…就说说而已），这个应用使用了一些 JS-base 的数学方法并使用 canvas 去做图片过滤器。这很麻烦，但是现在我们可以<a href="https://davidwalsh.name/css-filters" target="_blank" rel="external">用 CSS 的特性去完成这一功能</a>！</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* simple filter */</span></div><div class="line"><span class="selector-class">.myElement</span> &#123;</div><div class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(2px);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* advanced filter */</span></div><div class="line"><span class="selector-class">.myElement</span> &#123;</div><div class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(2px) grayscale (.<span class="number">5</span>) <span class="built_in">opacity</span>(0.8) <span class="built_in">hue-rotate</span>(120deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这类的过滤功能只是创建一个图片的原型，并且不会保存和导出来完成过滤器的功能。这对于图片管理或想处理任何一张图片来说很方便！</p>
<ul>
<li><a href="https://davidwalsh.name/demo/css-filters.php" target="_blank" rel="external">Demo</a></li>
</ul>
<h1 id="Pointer-Events-和点击事件"><a href="#Pointer-Events-和点击事件" class="headerlink" title="Pointer Events 和点击事件"></a><a href="https://davidwalsh.name/pointer-events" target="_blank" rel="external">Pointer Events 和点击事件</a></h1><p><a href="https://davidwalsh.name/pointer-events" target="_blank" rel="external">CSS 特性中的 <code>pointer-events</code></a> 提供了一个方法，能使一个元素 disable，即在用户点击某个元素时，不触发它在 JavaScript 中写的点击事件：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* do nothing when clicked or activated */</span></div><div class="line"><span class="selector-class">.disabled</span> &#123; <span class="attribute">pointer-events</span>: none; &#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* this will _not_ fire because of the pointer-events: none application */</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"disabled-element"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Clicked!"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在上述的例子中，由于 <code>pointer-events</code> 的值是 <code>none</code>，而使点击事件不被触发。大有用处的是，让你不必到处去检查类名或属性，来确认哪一个是 disabled 的了。</p>
<ul>
<li><a href="https://davidwalsh.name/demo/pointer-events.php" target="_blank" rel="external">Demo</a></li>
</ul>
<h1 id="Slide-Down-amp-Slide-Up"><a href="#Slide-Down-amp-Slide-Up" class="headerlink" title="Slide Down &amp; Slide Up"></a><a href="https://davidwalsh.name/css-slide" target="_blank" rel="external">Slide Down &amp; Slide Up</a></h1><p>CSS 使我们能够创建转换和动画，但通常我们需要一个 JavaScript 库帮助我们实现。例如一个比较流行的动画效果<a href="https://davidwalsh.name/css-slide" target="_blank" rel="external"> slide up 和 silde down</a>，大概很多人都不知道这个可以只用 CSS 实现吧！</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* slider in open state */</span></div><div class="line"><span class="selector-class">.slider</span> &#123;</div><div class="line">  <span class="attribute">overflow-y</span>: hidden;</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">500px</span>; <span class="comment">/* approximate max height */</span></div><div class="line"></div><div class="line">  <span class="attribute">transition-property</span>: all;</div><div class="line">  <span class="attribute">transition-duration</span>: .<span class="number">5s</span>;</div><div class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(0, 1, 0.5, 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* close it with the "closed" class */</span></div><div class="line"><span class="selector-class">.slider</span><span class="selector-class">.closed</span> &#123;</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很聪明地使用了 <code>max-height</code> 来控制元素的展开和收缩。</p>
<ul>
<li><a href="https://davidwalsh.name/demo/css-slide.php" target="_blank" rel="external">Demo</a></li>
</ul>
<h1 id="CSS-Counters"><a href="#CSS-Counters" class="headerlink" title="CSS Counters"></a><a href="https://davidwalsh.name/css-counters" target="_blank" rel="external">CSS Counters</a></h1><p>我们不禁地问，“counter” 在网上意味着什么呢？但是 <code>CSS Counters</code> 就是另外一回事了。这个特性可以把一个 counter 加到元素中，通过 <code>:before</code> 或 <code>:after</code> ：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* initialize the counter */</span></div><div class="line"><span class="selector-tag">ol</span><span class="selector-class">.slides</span> &#123;</div><div class="line">  <span class="attribute">counter-reset</span>: slideNum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* increment the counter */</span></div><div class="line"><span class="selector-tag">ol</span><span class="selector-class">.slides</span> &gt; <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">counter-increment</span>: slideNum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* display the counter value */</span></div><div class="line"><span class="selector-tag">ol</span><span class="selector-class">.slides</span> <span class="selector-tag">li</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"["</span> <span class="built_in">counter</span>(slideNum) <span class="string">"]"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通常这个会在一些模块或是列表中用到。</p>
<ul>
<li><a href="https://davidwalsh.name/demo/css-counters.php" target="_blank" rel="external">Demo</a></li>
</ul>
<h1 id="Unicode-CSS-Classes"><a href="#Unicode-CSS-Classes" class="headerlink" title="Unicode CSS Classes"></a><a href="https://davidwalsh.name/unicode-css-classes" target="_blank" rel="external">Unicode CSS Classes</a></h1><p>有大量的文章说明，去教你如何对 CSS 的类命名。但你应该不知道会有这样的文档，去教你<a href="https://davidwalsh.name/unicode-css-classes" target="_blank" rel="external">用特殊字符命名你的 css 类</a>：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.ಠ_ಠ &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f00</span>;</div><div class="line">  <span class="attribute">background</span>: pink;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.❤ &#123;</div><div class="line">  <span class="attribute">background</span>: lightgreen;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但请不要这么使用。</p>
<ul>
<li><a href="https://davidwalsh.name/demo/unicode-css-classes.php" target="_blank" rel="external">Demo</a></li>
</ul>
<h1 id="CSS-Circles"><a href="#CSS-Circles" class="headerlink" title="CSS Circles"></a><a href="https://davidwalsh.name/css-circles" target="_blank" rel="external">CSS Circles</a></h1><p><a href="https://davidwalsh.name/css-circles" target="_blank" rel="external">CSS 中的圆形</a> 与 <a href="https://davidwalsh.name/css-triangles" target="_blank" rel="external">CSS 中的三角形</a>一样。通过使用 <code>border-radius</code> 就能创建一个完美的圆形！</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.circle</span> &#123;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="comment">/* width and height can be anything, as long as they're equal */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你也可以给圆形添加一些渐变效果，甚至可以添加动画。CSS 拥有更多<a href="http://alistapart.com/article/css-shapes-101" target="_blank" rel="external">对于图形统一的 API</a>，当然现在你可以使用 hack 创建一个圆形。</p>
<ul>
<li><a href="https://davidwalsh.name/demo/css-circles.php" target="_blank" rel="external">Demo</a></li>
</ul>
<p>就是这些：你可能不知道的 7 个关于 CSS 的事，一部分是临界的情况，其他一部分还是非常实用的。那么就大胆地去用它们吧！</p>
<p><a href="https://davidwalsh.name/css-facts" target="_blank" rel="external"><strong>原文链接</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论你信不信，JavaScript 和 CSS 已经开始重叠，并为 CSS 增加了更多的功能。当我在写 &lt;a href=&quot;https://davidwalsh.name/ways-css-javascript-interact&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS 与 JavaScript 交互中你可能不知道的 5 种方式&lt;/a&gt;的时候，读者对于 CSS 与 JavaScript 已经重叠的事感到很惊讶。那么今天，我会着重为你介绍 7 个可以通过 CSS 完成的任务 —— 不使用 JavaScript 或图像处理！&lt;/p&gt;
&lt;h1 id=&quot;CSS-supports&quot;&gt;&lt;a href=&quot;#CSS-supports&quot; class=&quot;headerlink&quot; title=&quot;CSS @supports&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://davidwalsh.name/css-supports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS @supports&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;每个优秀的前端工程师都会在使用某个特性前测试一下，确保是否在浏览器中可以使用。而这类测试通常是由 JavaScript 完成的，当然，也有很多人用 Modernizr（拥有很多很好功能的测试工具）来测试特性。那么现在有一个 CSS 新的 API 可以让你去做特性测试：&lt;a href=&quot;https://davidwalsh.name/css-supports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@supports&lt;/a&gt;，下面的例子将简单地教你如何使用：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/* basic usage */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@supports(prop:value) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /* more styles */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/* real usage */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@supports (display: flex) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  div &amp;#123; display: flex; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/* testing prefixes too */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@supports (display: -webkit-flex) or&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          (display: -moz-flex) or&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          (display: flex) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    section &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      display: -webkit-flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      display: -moz-flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      display: flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      float: none;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="好文分享" scheme="http://joveyzheng.com/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="译文" scheme="http://joveyzheng.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="css" scheme="http://joveyzheng.com/tags/css/"/>
    
      <category term="features" scheme="http://joveyzheng.com/tags/features/"/>
    
      <category term="front-end" scheme="http://joveyzheng.com/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>使用 React 是业务需求，而不是技术需求</title>
    <link href="http://joveyzheng.com/2015/12/15/using-react-is-a-business-decision-not-a-technology-choice/"/>
    <id>http://joveyzheng.com/2015/12/15/using-react-is-a-business-decision-not-a-technology-choice/</id>
    <published>2015-12-15T04:23:23.000Z</published>
    <updated>2017-06-15T12:34:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React 已经在开发者圈越来越流行了，并且有很多说明其技术优势的资源。然而，迁移（或是选择）一个新的框架最终归结为向所有人推销 —— 包括非开发者。这里会有一小部分工程经理或项目经理会因为它的新颖，而选择使用它来重构，更糟的是，很多团队被 JavaScript 的高生产工具搞得焦头烂额了，可悲的是向后移动项目是向前移动 web 的一部分。这篇文章并不是试图教你关于 React 的新东西，只是试着去总结以下，起点是为了向所有人说明 React 的疑惑，不仅是开发者。</p>
<p><strong>总结</strong>：React 是一个为创建可组合的用户界面的库。同比其他类似的库如  Angular、Backbone、Knockout 和 Ember，React 的出现是为了解决业务问题而非技术的。接下来会为你解释 React 的重要性和对开发团队的益处。</p>
<h1 id="降低风险"><a href="#降低风险" class="headerlink" title="降低风险"></a>降低风险</h1><p><strong>稳定性</strong> —— Facebook 花了很大的精力在 React 上（Newsfeed，Instagram，Messenger，Ads Marketplace 等），并且拥有专职的技术团队来维护这个项目。它的 dog-food 测试和投资都不是现有的任何一个项目能比的。除了 Facebook 内部的工程师，还有一大批 React 的爱好者。随着版本的更迭，目前在 github 上拥有 571 个贡献者（截止到 2015 年 12 月）。</p>
<p><strong>正在使用 React</strong>：AirBnB，Asana，Atlassian，BBC，Chegg，CloudFlare，CNN.com，Codecademy，Coursera，Craftsy，Dailymotion，Dropbox，Expedia，Facebook，Feedly，Flipboard，HipChat，IMDb，Imgur，Instagram，Khan Academy，KISSmetrics，Mattermark，Minerva Project，Netflix，OkCupid，Rackspace，Rally Software，Ralph Lauren，Reddit，Redfin，Salesforce，Squarespace，The New York Times，Trunk Club，Twitter，Uber，University of Cincinnati，Venmo，WhatsApp，Wired，Wix，WordPress，Yahoo，Zendesk</p>
<h1 id="开发效率"><a href="#开发效率" class="headerlink" title="开发效率"></a>开发效率</h1><p><strong>强大的路径迁移</strong> —— React 允许开发者可以根据自己的需求将其放到任何一个已经存在的页面上。值得注意的是，React 是需要加载一个运行时的库（React 0.14.0 的大小是 39.4 kb），因此零碎的迁移会导致页面重量的增加，直到旧版本的库被移除才会减少。</p>
<a id="more"></a>
<p><strong>默认情况下的性能</strong> —— React 的使用模式，让它很难写出低性能的代码。此外，自从它减少了与 DOM 的直接交互，使得它不仅可以代替现有的一些库（Angular/Backbone/Ember），也不再需要大量像 jQuery 一样的依赖，从而减少整体部署代码大小。</p>
<p><strong>SEO</strong> —— SEO 是从服务器发送一个已经渲染好的页面到浏览器上。React 在设计时就考虑到了 SEO，它用 Node 可以在客户端或服务端进行渲染。其他工具允许在服务端进行渲染，但需要引入一些不稳定的 hack，同时还需要大量的人员去维护。而 React 有可能简化构建工具和减少维护成本。</p>
<p><strong>提高了代码的重用</strong> —— React 在提供良好的性能同时还可以管理组件的渲染生命周期，如此一来可以显著地提高开发人员的开发效率。通过可重用组件的创造、分配和使用，使之更简单，这样开发人员就能更好地节省使用和开发通用组件的时间。就如按钮一样的低阶元素和可折叠元素一样的高阶元素。</p>
<h1 id="提高开发效率"><a href="#提高开发效率" class="headerlink" title="提高开发效率"></a>提高开发效率</h1><p><strong>从混合资源中降低复杂度</strong> —— React 混合了 HTML 和 JavaScript，在此原则下，它们被紧紧地捆在一起，而分离它们是分离技术，这不是关注点。这个概念可以进一步扩展到 CSS，删除 CSS 开发过程中的一连串问题，包括全局命名、作用域/变量的隔离。详细请看：<a href="http://projects.formidablelabs.com/radium/" target="_blank" rel="external">Radium</a> 和 <a href="https://speakerdeck.com/vjeux/react-css-in-js" target="_blank" rel="external">React: CSS in js</a>。</p>
<p><strong>错误的快速隔离</strong> —— Facebook 提供了一个浏览器的<a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en" target="_blank" rel="external">扩展应用</a>，帮助开发者更好地查看某一 UI 是由哪些 component 和数据组合生成的。详细请看<a href="https://www.youtube.com/watch?v=D-ioDiacTm8" target="_blank" rel="external">这里</a>。</p>
<p><strong>简洁明了的代码</strong> —— 当前绝大多数的工具，都是以<strong>模型</strong>表示数据和<strong>视图</strong>显示数据结合在一起，从而生成丰富的 UI 交互。通常修改一个模型或视图（例如购物车）就可能在其他视图中触发“级联变化”，同时它依赖的是相同的数据。在一个大型应用中，依赖视图会变得很复杂，而且很难修复那些意想不到的 BUG。但是在 React 中，数据的流向是单向的，因此使得视图更容易理解。下面的图是展示信息的流动。<br><img src="https://cdn-images-1.medium.com/max/800/1*pHvDgaslF8EClCehi6AiMA.png" alt="stream"></p>
<p><strong>提高了易测性</strong> —— 一个组件，React 的通常做法是抽象数据参数和输出一个没有其他副作用的 DOM。通过移除依赖使用和在 DOM 中创建 state 的 store，使得这些组件拥有更多的原子和可测试性。</p>
<h1 id="开发团队的效益"><a href="#开发团队的效益" class="headerlink" title="开发团队的效益"></a>开发团队的效益</h1><p><strong>快捷的管理</strong> —— React 的 API 非常小，结合声明性语法和组件化的 UI 元素使新的开发人员能更快地上手 —— 特别是刚毕业的大学生或是不熟悉前端坏境的开发者。</p>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="Facebook-Ads"><a href="#Facebook-Ads" class="headerlink" title="Facebook Ads"></a><a href="http://5by5.tv/changelog/149" target="_blank" rel="external">Facebook Ads</a></h2><p>“It was extremely difficult to change without causing some side effect or bug somewhere else in the application … When the team rebuilt it in React they found that their rate of new bugs being introduced had gone through the floor”</p>
<p>-Spencer Ahrens</p>
<p>“When a bug did come in it was much easier to figure out what was going wrong and make a targeted fix”</p>
<p>-Spencer Ahrens</p>
<h2 id="Netflix"><a href="#Netflix" class="headerlink" title="Netflix"></a><a href="http://techblog.netflix.com/2015/01/netflix-likes-react.html" target="_blank" rel="external">Netflix</a></h2><p>“React has exceeded our requirements and enabled us to build a tremendous foundation on which to innovate the Netflix experience”</p>
<h2 id="Hit-Chat"><a href="#Hit-Chat" class="headerlink" title="Hit Chat"></a><a href="https://developer.atlassian.com/blog/2015/02/rebuilding-hipchat-with-react/" target="_blank" rel="external">Hit Chat</a></h2><p>“The dev speed we’ve gained…proves that we can release new client features faster and with more confidence on this platform than on any native client.”</p>
<p><a href="https://blog.formidable.com/using-react-is-a-business-decision-not-a-technology-choice-63c4641c5f7#.o7fu0q9m6" target="_blank" rel="external"><strong>原文链接</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;React 已经在开发者圈越来越流行了，并且有很多说明其技术优势的资源。然而，迁移（或是选择）一个新的框架最终归结为向所有人推销 —— 包括非开发者。这里会有一小部分工程经理或项目经理会因为它的新颖，而选择使用它来重构，更糟的是，很多团队被 JavaScript 的高生产工具搞得焦头烂额了，可悲的是向后移动项目是向前移动 web 的一部分。这篇文章并不是试图教你关于 React 的新东西，只是试着去总结以下，起点是为了向所有人说明 React 的疑惑，不仅是开发者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：React 是一个为创建可组合的用户界面的库。同比其他类似的库如  Angular、Backbone、Knockout 和 Ember，React 的出现是为了解决业务问题而非技术的。接下来会为你解释 React 的重要性和对开发团队的益处。&lt;/p&gt;
&lt;h1 id=&quot;降低风险&quot;&gt;&lt;a href=&quot;#降低风险&quot; class=&quot;headerlink&quot; title=&quot;降低风险&quot;&gt;&lt;/a&gt;降低风险&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;稳定性&lt;/strong&gt; —— Facebook 花了很大的精力在 React 上（Newsfeed，Instagram，Messenger，Ads Marketplace 等），并且拥有专职的技术团队来维护这个项目。它的 dog-food 测试和投资都不是现有的任何一个项目能比的。除了 Facebook 内部的工程师，还有一大批 React 的爱好者。随着版本的更迭，目前在 github 上拥有 571 个贡献者（截止到 2015 年 12 月）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正在使用 React&lt;/strong&gt;：AirBnB，Asana，Atlassian，BBC，Chegg，CloudFlare，CNN.com，Codecademy，Coursera，Craftsy，Dailymotion，Dropbox，Expedia，Facebook，Feedly，Flipboard，HipChat，IMDb，Imgur，Instagram，Khan Academy，KISSmetrics，Mattermark，Minerva Project，Netflix，OkCupid，Rackspace，Rally Software，Ralph Lauren，Reddit，Redfin，Salesforce，Squarespace，The New York Times，Trunk Club，Twitter，Uber，University of Cincinnati，Venmo，WhatsApp，Wired，Wix，WordPress，Yahoo，Zendesk&lt;/p&gt;
&lt;h1 id=&quot;开发效率&quot;&gt;&lt;a href=&quot;#开发效率&quot; class=&quot;headerlink&quot; title=&quot;开发效率&quot;&gt;&lt;/a&gt;开发效率&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;强大的路径迁移&lt;/strong&gt; —— React 允许开发者可以根据自己的需求将其放到任何一个已经存在的页面上。值得注意的是，React 是需要加载一个运行时的库（React 0.14.0 的大小是 39.4 kb），因此零碎的迁移会导致页面重量的增加，直到旧版本的库被移除才会减少。&lt;/p&gt;
    
    </summary>
    
      <category term="好文分享" scheme="http://joveyzheng.com/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="译文" scheme="http://joveyzheng.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="React" scheme="http://joveyzheng.com/tags/React/"/>
    
      <category term="JavaScript" scheme="http://joveyzheng.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ReactJS 的学习教程</title>
    <link href="http://joveyzheng.com/2015/12/07/best-tutorials-to-learn-reactjs/"/>
    <id>http://joveyzheng.com/2015/12/07/best-tutorials-to-learn-reactjs/</id>
    <published>2015-12-07T01:48:17.000Z</published>
    <updated>2017-06-15T12:32:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.logopearl.com/blog/wp-content/uploads/2015/12/reactjs-tutorials.jpg"></p>
<p>当提到为某个应用或网站构建 UI 时，ReactJS 往往是首先列出的最好的 JavaScript 库。首先它是开源的，并且已经在 Instagram 和 Facebook 上得到实践。还有一些著名的网站也使用 ReactJS 去构建他们的 UI，例如 Airbnb，Khan Academy，BBC，Netflix <a href="https://github.com/facebook/react/wiki/Sites-Using-React" target="_blank" rel="external">等等</a>。</p>
<p>如果你仍然在学习 ReactJS 的路上，并用它构建动态的用户界面，这里有一些教程能帮助你加速学习进程。</p>
<p>下面列出的是一些开发者和作者所写的一部分教程，他们能帮你从新手提升到专家。</p>
<h1 id="ReactJs-net-的教程"><a href="#ReactJs-net-的教程" class="headerlink" title="ReactJs.net 的教程"></a><a href="http://reactjs.net/getting-started/tutorial.html" target="_blank" rel="external">ReactJs.net 的教程</a></h1><p><img src="http://www.logopearl.com/blog/wp-content/uploads/2015/12/1-reactjs-website.jpg"></p>
<p>这是众多版本的 React 教程之一。这个专门为设计师和开发者去“入门” React 和探索其功能而写的。本教程涵盖了利用 ReactJS 库去创建一个全新的 asp.net MVC 网站的完整流程，并且保证了学习的深入浅出。开始一个新项目的基本流程是，安装 React，构建 component，优化等等。</p>
<h1 id="Ken-Wheeler-学习-ReactJS"><a href="#Ken-Wheeler-学习-ReactJS" class="headerlink" title="Ken Wheeler - 学习 ReactJS"></a><a href="https://scotch.io/tutorials/learning-react-getting-started-and-concepts" target="_blank" rel="external">Ken Wheeler - 学习 ReactJS</a></h1><p><img src="http://www.logopearl.com/blog/wp-content/uploads/2015/12/2-scothio-reactjs.jpg"></p>
<p>这是 Ken Wheeler 在 Scotch.io 上发表的一篇很棒的教程。在去年发表的时候至今，已经有超过 200 条的分享，当然这些也只有在开发者社区圈里才会对此感兴趣。可以说这是目前找到的 ReactJS 最好的教程之一。此教程主要分为五个部分，从基础开始，涵盖了<strong>什么是 React</strong>，<strong>虚拟 DOM 是如何工作的</strong>，<strong>如何构建页面</strong>，<strong>生命周期的说明</strong>和 <strong>state</strong> 等。</p>
<a id="more"></a>
<p>第二部分则介绍了一些高级的概念，例如 Flux，dispatcher，视图控制器的依赖等等。第三，第四和第五部分主要是用 30 分钟去教你如何开发一个具有购物车的 ReactJS 应用，构建一个实时的 Twitter 流，以及开发一个移动应用。</p>
<h1 id="Jack-Callister-React-的快速入门"><a href="#Jack-Callister-React-的快速入门" class="headerlink" title="Jack Callister - React 的快速入门"></a><a href="http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html" target="_blank" rel="external">Jack Callister - React 的快速入门</a></h1><p><img src="http://www.logopearl.com/blog/wp-content/uploads/2015/12/3-codementor-tutorial.jpg"></p>
<p>如果你正在寻找一个如何使用 React 库的快速指南，这会是一个很好的地方。这篇文章发布在 Jack Callister 的个人博客中。这篇文章并是不是很出名，但它对于学习基础知识已经足够了。作者写时主要描述 react element，component，JSX 和虚拟 DOM 的基础概念。当你理解了这些概念，就可以很轻松地构建一系列的用户界面。作者首先解释了渲染，然后是 component，props，state 和合成。</p>
<p>本文的另一个观点是，它充满了有用的工具链接，ReactJS 资源和信息。ReactJs 的初学者绝对值得一读!</p>
<h1 id="Leveluptuts-React-for-Everyone"><a href="#Leveluptuts-React-for-Everyone" class="headerlink" title="Leveluptuts - React for Everyone"></a><a href="http://leveluptuts.com/tutorials/react-for-everyone" target="_blank" rel="external">Leveluptuts - React for Everyone</a></h1><p><img src="http://www.logopearl.com/blog/wp-content/uploads/2015/12/4-levelup-tutorials.jpg"></p>
<p>此教程的本质是提供给任何一个学习 ReactJS 的人，无论是初学者还是高手。这里面有一系列的视频来做介绍，并且涵盖了入门和理解这个库的基础知识。</p>
<p>在第二章中我们会得到很有趣的部分，教你如何构建你的第一个 react 组件。其余章节包含了 <strong>react component properties</strong>，JSX 的条件语句，父子组件的关系和使用 state。这些都是必看的视频。</p>
<h1 id="ReactJS-入门级教程"><a href="#ReactJS-入门级教程" class="headerlink" title="ReactJS 入门级教程"></a><a href="https://blog.risingstack.com/the-react-way-getting-started-tutorial/" target="_blank" rel="external">ReactJS 入门级教程</a></h1><p><img src="http://www.logopearl.com/blog/wp-content/uploads/2015/12/5-risingstack-reactjs.jpg"></p>
<p>这是入门 ReactJS 的另一个很好的教程。这是只是三部分的第一部分。对于新人学习基础知识而言这是很棒的一部分。开始介绍了什么是 React，虚拟 DOM 的概念，然后就是如何在服务端做渲染，组件驱动的开发，还有一点关于 JSX 和有用的链接等。</p>
<p>这其实是一个“入门级”课程的详细教程。在开发 ReactJS 的过程中确保你都看了这些非常有用的资源！</p>
<p><a href="http://www.logopearl.com/blog/best-tutorials-to-learn-reactjs/" target="_blank" rel="external"><strong>原文链接</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.logopearl.com/blog/wp-content/uploads/2015/12/reactjs-tutorials.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;当提到为某个应用或网站构建 UI 时，ReactJS 往往是首先列出的最好的 JavaScript 库。首先它是开源的，并且已经在 Instagram 和 Facebook 上得到实践。还有一些著名的网站也使用 ReactJS 去构建他们的 UI，例如 Airbnb，Khan Academy，BBC，Netflix &lt;a href=&quot;https://github.com/facebook/react/wiki/Sites-Using-React&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;等等&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你仍然在学习 ReactJS 的路上，并用它构建动态的用户界面，这里有一些教程能帮助你加速学习进程。&lt;/p&gt;
&lt;p&gt;下面列出的是一些开发者和作者所写的一部分教程，他们能帮你从新手提升到专家。&lt;/p&gt;
&lt;h1 id=&quot;ReactJs-net-的教程&quot;&gt;&lt;a href=&quot;#ReactJs-net-的教程&quot; class=&quot;headerlink&quot; title=&quot;ReactJs.net 的教程&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://reactjs.net/getting-started/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactJs.net 的教程&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.logopearl.com/blog/wp-content/uploads/2015/12/1-reactjs-website.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是众多版本的 React 教程之一。这个专门为设计师和开发者去“入门” React 和探索其功能而写的。本教程涵盖了利用 ReactJS 库去创建一个全新的 asp.net MVC 网站的完整流程，并且保证了学习的深入浅出。开始一个新项目的基本流程是，安装 React，构建 component，优化等等。&lt;/p&gt;
&lt;h1 id=&quot;Ken-Wheeler-学习-ReactJS&quot;&gt;&lt;a href=&quot;#Ken-Wheeler-学习-ReactJS&quot; class=&quot;headerlink&quot; title=&quot;Ken Wheeler - 学习 ReactJS&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://scotch.io/tutorials/learning-react-getting-started-and-concepts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ken Wheeler - 学习 ReactJS&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.logopearl.com/blog/wp-content/uploads/2015/12/2-scothio-reactjs.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是 Ken Wheeler 在 Scotch.io 上发表的一篇很棒的教程。在去年发表的时候至今，已经有超过 200 条的分享，当然这些也只有在开发者社区圈里才会对此感兴趣。可以说这是目前找到的 ReactJS 最好的教程之一。此教程主要分为五个部分，从基础开始，涵盖了&lt;strong&gt;什么是 React&lt;/strong&gt;，&lt;strong&gt;虚拟 DOM 是如何工作的&lt;/strong&gt;，&lt;strong&gt;如何构建页面&lt;/strong&gt;，&lt;strong&gt;生命周期的说明&lt;/strong&gt;和 &lt;strong&gt;state&lt;/strong&gt; 等。&lt;/p&gt;
    
    </summary>
    
      <category term="好文分享" scheme="http://joveyzheng.com/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="译文" scheme="http://joveyzheng.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="ReactJS" scheme="http://joveyzheng.com/tags/ReactJS/"/>
    
      <category term="教程" scheme="http://joveyzheng.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Tutorials" scheme="http://joveyzheng.com/tags/Tutorials/"/>
    
      <category term="getting started lesson" scheme="http://joveyzheng.com/tags/getting-started-lesson/"/>
    
  </entry>
  
  <entry>
    <title>对于 Web 设计师和开发者非常有用的 25 个 Chrome 扩展应用</title>
    <link href="http://joveyzheng.com/2015/12/04/25-chrome-extensions-for-web-designers-developers/"/>
    <id>http://joveyzheng.com/2015/12/04/25-chrome-extensions-for-web-designers-developers/</id>
    <published>2015-12-04T02:10:33.000Z</published>
    <updated>2017-06-15T12:35:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>尽管 Chrome 的开发者工具给你足够多的实用工具来覆盖你的设计和开发需求，但也可以通过添加免费的扩展应用去进一步扩展浏览器的功能。根据你的需要，并选择完美的扩展，你可以轻松地创建一个个性化的开发环境，这会大大提高你的开发效率。</p>
<p>要介绍的 25 个 Chrome 扩展应该我们为你选择分为以下几类：<a href="#前端扩展">前端扩展</a>，<a href="#在线编辑">在线编辑</a>，<a href="#验证器与性能相关">验证器与性能相关</a>，<a href="#测量扩展应用">测量扩展应用</a>，<a href="#颜色工具">颜色工具</a>，<a href="#字体测试工具">字体测试工具</a>和 <a href="#很有用的实用性扩展应用">很有用的实用性扩展应用</a>。</p>
<h1 id="前端扩展"><a href="#前端扩展" class="headerlink" title="前端扩展"></a>前端扩展</h1><h2 id="SnappySnippet"><a href="#SnappySnippet" class="headerlink" title="SnappySnippet"></a>SnappySnippet</h2><p><strong><a href="https://chrome.google.com/webstore/detail/snappysnippet/blfngdefapoapkcdibbdkigpeaffgcil?hl=en" target="_blank" rel="external">SnappySnippet</a></strong> 把 CSS 和 HTML 从 DOM 树里提取出来，然后发送到 CodePen，jsFiddle 或 JS Bin 上。<br><img src="http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-01.png?w=520"></p>
<h2 id="MagiCSS"><a href="#MagiCSS" class="headerlink" title="MagiCSS"></a>MagiCSS</h2><p><strong><a href="https://chrome.google.com/webstore/detail/magicss-live-css-editor/ifhikkcafabcgolfjegfcgloomalapol?hl=en" target="_blank" rel="external">MagiCSS</a></strong> 一个拥有内置编辑器的在线 CSS 编辑扩展应用，具有美化和减小 CSS 的功能。同时还允许创建 Github Gist。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-02.png?w=520"></p>
<h2 id="CSS-Dig"><a href="#CSS-Dig" class="headerlink" title="CSS Dig"></a>CSS Dig</h2><p><strong><a href="https://chrome.google.com/webstore/detail/css-dig/lpnhmlhomomelfkcjnkcacofhmggjmco" target="_blank" rel="external">CSS Dig</a></strong> 能够在大多数的网站上找到和组织样式表和样式块，给你一个简单的方法来分析和计划重构的代码。<br><img src="http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-03.png?w=520"></p>
<h2 id="CSSViewer"><a href="#CSSViewer" class="headerlink" title="CSSViewer"></a>CSSViewer</h2><p><strong><a href="https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce?hl=en" target="_blank" rel="external">CSSViewer</a></strong> 能集成很多工具和扩展程序去执行一个简单的任务。这使得它们更好地发挥功能。但没有 Chrome 扩展应用集合能在不集成的情况下可以完成这种功能。用法很简单，你只需点击工具栏的图标，然后将鼠标移到你想审查的元素上就可以了。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-04.png?w=520"></p>
<a id="more"></a>
<h2 id="CSS-Shack"><a href="#CSS-Shack" class="headerlink" title="CSS-Shack"></a>CSS-Shack</h2><p><strong><a href="https://chrome.google.com/webstore/detail/css-shack/geiccgjkigajaicecnhdokggninehdlp" target="_blank" rel="external">CSS-Shack</a></strong> 帮助你创建图层样式（就像你用如 PS 一样），并能生成一个 CSS 文件。<br><img src="http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-05.png?w=520"></p>
<h2 id="CSS3-Generator"><a href="#CSS3-Generator" class="headerlink" title="CSS3 Generator"></a>CSS3 Generator</h2><p><strong><a href="https://chrome.google.com/webstore/detail/css3-generator/dmlgmehijaodgkkooghkknjjkddahmej?hl=en-GB" target="_blank" rel="external">CSS3 Generator</a></strong> 如名，可以帮助你生成 CSS3 代码。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-06.png?w=520"></p>
<h2 id="CSS-Shapes-Editor"><a href="#CSS-Shapes-Editor" class="headerlink" title="CSS Shapes Editor"></a>CSS Shapes Editor</h2><p><strong><a href="https://chrome.google.com/webstore/detail/css-shapes-editor/nenndldnbcncjmeacmnondmkkfedmgmp" target="_blank" rel="external">CSS Shapes Editor</a></strong> 在线编辑 CSS 形状的值。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-07.png?w=520"></p>
<h1 id="在线编辑"><a href="#在线编辑" class="headerlink" title="在线编辑"></a>在线编辑</h1><h2 id="WordPress-Style-Editor"><a href="#WordPress-Style-Editor" class="headerlink" title="WordPress Style Editor"></a>WordPress Style Editor</h2><p><strong><a href="https://chrome.google.com/webstore/detail/wordpress-style-editor/bgdpllcnhcmpfcheafdhimpklhjoommn?hl=en" target="_blank" rel="external">WordPress Style Editor</a></strong> 支持在线审查和编辑你的 WordPress 的样式。<br><img src="http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-08.png?w=520"></p>
<h2 id="PageEdit"><a href="#PageEdit" class="headerlink" title="PageEdit"></a>PageEdit</h2><p><strong><a href="https://chrome.google.com/webstore/detail/pageedit/ebkclgoaabaibghklgknnjdemknjaeic" target="_blank" rel="external">PageEdit</a></strong> 能把 Chrome 变成所见即所得的编辑器，你可以用它编辑任何网页。</p>
<iframe width="640" height="400" src="https://www.youtube.com/embed/Ts4bSR1hpxg" frameborder="0" allowfullscreen></iframe>

<h1 id="验证器与性能相关"><a href="#验证器与性能相关" class="headerlink" title="验证器与性能相关"></a>验证器与性能相关</h1><h2 id="Perfmap"><a href="#Perfmap" class="headerlink" title="Perfmap"></a>Perfmap</h2><p><strong><a href="https://chrome.google.com/webstore/detail/perfmap/hgpnhiajcdppfbogcpfdgcceepgkhdmk?hl=en&amp;gl=GB" target="_blank" rel="external">Perfmap</a></strong> 它用 Resource Timing API 来创建一个网站的前端的性能的热图检查的定时器，使得可以在浏览器中查看加载的资源。<br><img src="http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-12.png?w=520"></p>
<h2 id="Validity"><a href="#Validity" class="headerlink" title="Validity"></a>Validity</h2><p><strong><a href="https://chrome.google.com/webstore/detail/validity/bbicmjjbohdfglopkidebfccilipgeif?hl=en-GB" target="_blank" rel="external">Validity</a></strong> 帮助你验证任何一个网页。可以在 console 页查看错误的数量和详情。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-13.png?w=520"></p>
<h2 id="Web-Developer-Checklist"><a href="#Web-Developer-Checklist" class="headerlink" title="Web Developer Checklist"></a>Web Developer Checklist</h2><p><strong><a href="https://chrome.google.com/webstore/detail/web-developer-checklist/iahamcpedabephpcgkeikbclmaljebjp" target="_blank" rel="external">Web Developer Checklist</a></strong> 必备的扩展应用，可以查看任何一个网页的报错和反常的问题。<br><img src="http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-10.png?w=520"></p>
<h2 id="Bootlint-This-Page"><a href="#Bootlint-This-Page" class="headerlink" title="Bootlint This Page"></a>Bootlint This Page</h2><p><strong><a href="https://chrome.google.com/webstore/detail/bootlint-this-page/cnamjhcdoadndjpjodeclalnmfhkoepb?hl=en&amp;gl=GB" target="_blank" rel="external">Bootlint This Page</a></strong> 在 Chrome 浏览器上显示一个按钮，帮助你查看任何一个基于 BootStrap 的网页的报错。可以在 console 页查看。<br><img src="http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-11.png?w=520"></p>
<h2 id="Check-My-Links"><a href="#Check-My-Links" class="headerlink" title="Check My Links"></a>Check My Links</h2><p><strong><a href="https://chrome.google.com/webstore/detail/check-my-links/ojkcdipcgfaekbeaelaapakgnjflfglf" target="_blank" rel="external">Check My Links</a></strong> 扫描网页，并把链接以高亮显示，有效为绿色，无效为红色。没人会喜欢无效的链接！<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-27.png?w=520"></p>
<h1 id="测量扩展应用"><a href="#测量扩展应用" class="headerlink" title="测量扩展应用"></a>测量扩展应用</h1><h2 id="Page-Ruler"><a href="#Page-Ruler" class="headerlink" title="Page Ruler"></a>Page Ruler</h2><p><strong><a href="https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn?hl=en" target="_blank" rel="external">Page Ruler</a></strong> 能够在任何网上形成一个画尺，并显示元素的 width，height 和 position。<br><img src="http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-14.png?w=520"></p>
<h2 id="Dimensions"><a href="#Dimensions" class="headerlink" title="Dimensions"></a>Dimensions</h2><p><strong><a href="https://chrome.google.com/webstore/detail/dimensions/baocaagndhipibgklemoalmkljaimfdj" target="_blank" rel="external">Dimensions</a></strong> 简单且使用的工具，为你测量屏幕宽度和高度。<br><img src="http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-15.png?w=520"></p>
<h1 id="颜色工具"><a href="#颜色工具" class="headerlink" title="颜色工具"></a>颜色工具</h1><h2 id="ColorZilla"><a href="#ColorZilla" class="headerlink" title="ColorZilla"></a>ColorZilla</h2><p><strong><a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp" target="_blank" rel="external">ColorZilla</a></strong> 起源于 Firefox，但它为 Chrome 增加了多种颜色工具，像吸管，颜色选择器，调色板查看器和梯度生成器。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-17.png?w=520"></p>
<h2 id="Color-Tab"><a href="#Color-Tab" class="headerlink" title="Color Tab"></a>Color Tab</h2><p><strong><a href="http://colorhunt.co/tab/" target="_blank" rel="external">Color Tab</a></strong> 在你每次打开一个新标签时，会给你一个美丽的新配色方案。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-18.png?w=520"></p>
<h1 id="字体测试工具"><a href="#字体测试工具" class="headerlink" title="字体测试工具"></a>字体测试工具</h1><h2 id="Fontface-Ninja"><a href="#Fontface-Ninja" class="headerlink" title="Fontface Ninja"></a>Fontface Ninja</h2><p><strong><a href="https://chrome.google.com/webstore/detail/fontface-ninja/eljapbgkmlngdpckoiiibecpemleclhh" target="_blank" rel="external">Fontface Ninja</a></strong> 可以识别任何网页的字体，同时给出它的 size 和 line-spacing。帮助你测试和探索新的字体。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-19.png?w=520"></p>
<h2 id="Font-Playground"><a href="#Font-Playground" class="headerlink" title="Font Playground"></a>Font Playground</h2><p><strong><a href="https://chrome.google.com/webstore/detail/font-playground/hdpmpnhaoddjelneingmbnhaibbmjgno?hl=en" target="_blank" rel="external">Font Playground</a></strong> 在任何网页上预览 Google 成千上万的字体。<br><img src="http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-20.png?w=520"></p>
<h2 id="TypeWonder"><a href="#TypeWonder" class="headerlink" title="TypeWonder"></a>TypeWonder</h2><p><strong><a href="https://chrome.google.com/webstore/detail/typewonder/ohgmapelghofmbacalgamfbejaghdilh" target="_blank" rel="external">TypeWonder</a></strong> 允许你在任何网站测试 web 字体。输入站点 URL 就可以立马预览字体。<br><img src="http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-21.png?w=520"></p>
<h1 id="很有用的实用性扩展应用"><a href="#很有用的实用性扩展应用" class="headerlink" title="很有用的实用性扩展应用"></a>很有用的实用性扩展应用</h1><h2 id="Responsive-Web-Design-Tester"><a href="#Responsive-Web-Design-Tester" class="headerlink" title="Responsive Web Design Tester"></a>Responsive Web Design Tester</h2><p><strong><a href="https://chrome.google.com/webstore/detail/responsive-web-design-tes/objclahbaimlfnbjdeobicmmlnbhamkg?hl=en" target="_blank" rel="external">Responsive Web Design Tester</a></strong> 是一个简单的工具，来帮助快速、轻松地测试网站在大多数流行的移动设备上的响应。<br><img src="http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-22.png?w=520"></p>
<h2 id="45to75"><a href="#45to75" class="headerlink" title="45to75"></a>45to75</h2><p><strong><a href="https://chrome.google.com/webstore/detail/45to75/efmppndinjbljeellfdkpghgblenbcdd" target="_blank" rel="external">45to75</a></strong> 为保证在所有大小设备上，你的文字是可读的。它可以帮你把句子规定在 45 到 75 个字符之间，从而优化句子长度。<br><img src="http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-16.png?w=520"></p>
<h2 id="PerfectPixel"><a href="#PerfectPixel" class="headerlink" title="PerfectPixel"></a>PerfectPixel</h2><p><strong><a href="https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi" target="_blank" rel="external">PerfectPixel</a></strong> 在开发 HTML 时，它会把半透明图像叠加在顶部，允许你在每个像素间进行比较。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-23.png?w=520"></p>
<h2 id="ZenHub"><a href="#ZenHub" class="headerlink" title="ZenHub"></a>ZenHub</h2><p><strong><a href="https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd" target="_blank" rel="external">ZenHub</a></strong> 为 Github 项目管理应用。有节省时间的特性，如 drap-drop 任务板和 to-do 列表，帮助你提升 Github 的生产效率。<br><img src="http://i0.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-24.png?w=520"></p>
<h2 id="Instant-Wireframe"><a href="#Instant-Wireframe" class="headerlink" title="Instant Wireframe"></a>Instant Wireframe</h2><p><strong><a href="https://chrome.google.com/webstore/detail/instant-wireframe/pmpmnmbgidlnoamkpmcikaejhmeldnha" target="_blank" rel="external">Instant Wireframe</a></strong> 谁不喜欢漂亮的线框呢？它给为任何一个网页添加线框，同时本地的也可以。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-25.png?w=520"></p>
<h2 id="Minimalist-Markdown-Editor"><a href="#Minimalist-Markdown-Editor" class="headerlink" title="Minimalist Markdown Editor"></a>Minimalist Markdown Editor</h2><p><strong><a href="https://chrome.google.com/webstore/detail/minimalist-markdown-edito/pghodfjepegmciihfhdipmimghiakcjf" target="_blank" rel="external">Minimalist Markdown Editor</a></strong> 同步预览 Markdown。可以快速地帮 Markdown 转化成 HTML。<br><img src="http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-26.png?w=520"></p>
<h2 id="fb-flo"><a href="#fb-flo" class="headerlink" title="fb-flo"></a>fb-flo</h2><p><strong><a href="https://facebook.github.io/fb-flo/" target="_blank" rel="external">fb-flo</a></strong> 由 Facebook 开发，同时也是 Chrome 的扩展应用。使你能够在线编辑 JS，CSS，images 或任何静态资源。</p>
<h2 id="Web-Developer"><a href="#Web-Developer" class="headerlink" title="Web Developer"></a>Web Developer</h2><p><strong><a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm" target="_blank" rel="external">Web Developer</a></strong> 如果你现在还没用这个应用，赶紧吧。这是迄今为止最受欢迎的 Chrome 和 Firefox 开发人员扩展应用。它添加了一个超级有用工具到浏览器，每个网页设计师和开发人员，还有你可能甚至不知道你需要的都会需要。</p>
<h2 id="MySQL-Admin"><a href="#MySQL-Admin" class="headerlink" title="MySQL Admin"></a>MySQL Admin</h2><p><strong><a href="https://chrome.google.com/webstore/detail/chrome-mysql-admin/ndgnpnpakfcdjmpgmcaknimfgcldechn" target="_blank" rel="external">MySQL Admin</a></strong> 为你更好地，更简单地管理 MySQL 数据库。<br><img src="http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-29.png?w=520"></p>
<h1 id="完毕！"><a href="#完毕！" class="headerlink" title="完毕！"></a>完毕！</h1><p>想要获取更多的 Chrome 扩展应用，请看 <a href="http://devtoolstips.com/" target="_blank" rel="external">DevTools Tips</a>，这里收集了 Chrome 的开发工具集和基本使用方法。如果你是一个设计师或开发人员，想获取更新最新的设计和开发资讯，请访问 Chrome 的扩展应用 <a href="https://chrome.google.com/webstore/detail/muzli-design-breakfast/glcipcfhmopcgidicgdociohdoicpdfc" target="_blank" rel="external">Muzli</a> 或 <a href="https://chrome.google.com/webstore/detail/panda-4-news-inspiration/haafibkemckmbknhfkiiniobjpgkebko" target="_blank" rel="external">Panda</a>。</p>
<p>如果你正在寻找 Firefox 的扩展应用，请看：<a href="http://speckyboy.com/2011/05/03/20-essential-firefox-4-addonsextensions-for-web-developers/" target="_blank" rel="external">对于 Web 开发非常有用的 20 个 Firefox 扩展应用</a>。</p>
<p>之前还有一篇发布在 <a href="http://speckyboy.com/" target="_blank" rel="external">Speckyboy Design Magazine</a> 上的文章是<a href="http://speckyboy.com/2015/12/03/chrome-extensions-web-designers-developers/" target="_blank" rel="external">对于 Web 设计师和开发者非常有用的 20 个 Chrome 扩展应用</a>。</p>
<p><a href="http://p2html.com/blog/25-chrome-extensions-for-web-designers-developers/" target="_blank" rel="external"><strong>原文链接</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管 Chrome 的开发者工具给你足够多的实用工具来覆盖你的设计和开发需求，但也可以通过添加免费的扩展应用去进一步扩展浏览器的功能。根据你的需要，并选择完美的扩展，你可以轻松地创建一个个性化的开发环境，这会大大提高你的开发效率。&lt;/p&gt;
&lt;p&gt;要介绍的 25 个 Chrome 扩展应该我们为你选择分为以下几类：&lt;a href=&quot;#前端扩展&quot;&gt;前端扩展&lt;/a&gt;，&lt;a href=&quot;#在线编辑&quot;&gt;在线编辑&lt;/a&gt;，&lt;a href=&quot;#验证器与性能相关&quot;&gt;验证器与性能相关&lt;/a&gt;，&lt;a href=&quot;#测量扩展应用&quot;&gt;测量扩展应用&lt;/a&gt;，&lt;a href=&quot;#颜色工具&quot;&gt;颜色工具&lt;/a&gt;，&lt;a href=&quot;#字体测试工具&quot;&gt;字体测试工具&lt;/a&gt;和 &lt;a href=&quot;#很有用的实用性扩展应用&quot;&gt;很有用的实用性扩展应用&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;前端扩展&quot;&gt;&lt;a href=&quot;#前端扩展&quot; class=&quot;headerlink&quot; title=&quot;前端扩展&quot;&gt;&lt;/a&gt;前端扩展&lt;/h1&gt;&lt;h2 id=&quot;SnappySnippet&quot;&gt;&lt;a href=&quot;#SnappySnippet&quot; class=&quot;headerlink&quot; title=&quot;SnappySnippet&quot;&gt;&lt;/a&gt;SnappySnippet&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/snappysnippet/blfngdefapoapkcdibbdkigpeaffgcil?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SnappySnippet&lt;/a&gt;&lt;/strong&gt; 把 CSS 和 HTML 从 DOM 树里提取出来，然后发送到 CodePen，jsFiddle 或 JS Bin 上。&lt;br&gt;&lt;img src=&quot;http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-01.png?w=520&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;MagiCSS&quot;&gt;&lt;a href=&quot;#MagiCSS&quot; class=&quot;headerlink&quot; title=&quot;MagiCSS&quot;&gt;&lt;/a&gt;MagiCSS&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/magicss-live-css-editor/ifhikkcafabcgolfjegfcgloomalapol?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MagiCSS&lt;/a&gt;&lt;/strong&gt; 一个拥有内置编辑器的在线 CSS 编辑扩展应用，具有美化和减小 CSS 的功能。同时还允许创建 Github Gist。&lt;br&gt;&lt;img src=&quot;http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-02.png?w=520&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSS-Dig&quot;&gt;&lt;a href=&quot;#CSS-Dig&quot; class=&quot;headerlink&quot; title=&quot;CSS Dig&quot;&gt;&lt;/a&gt;CSS Dig&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/css-dig/lpnhmlhomomelfkcjnkcacofhmggjmco&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS Dig&lt;/a&gt;&lt;/strong&gt; 能够在大多数的网站上找到和组织样式表和样式块，给你一个简单的方法来分析和计划重构的代码。&lt;br&gt;&lt;img src=&quot;http://i1.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-03.png?w=520&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSSViewer&quot;&gt;&lt;a href=&quot;#CSSViewer&quot; class=&quot;headerlink&quot; title=&quot;CSSViewer&quot;&gt;&lt;/a&gt;CSSViewer&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSViewer&lt;/a&gt;&lt;/strong&gt; 能集成很多工具和扩展程序去执行一个简单的任务。这使得它们更好地发挥功能。但没有 Chrome 扩展应用集合能在不集成的情况下可以完成这种功能。用法很简单，你只需点击工具栏的图标，然后将鼠标移到你想审查的元素上就可以了。&lt;br&gt;&lt;img src=&quot;http://i2.wp.com/p2html.com/blog/wp-content/uploads/2015/12/chrome-extension-web-design-04.png?w=520&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="好文分享" scheme="http://joveyzheng.com/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="译文" scheme="http://joveyzheng.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Web Development" scheme="http://joveyzheng.com/tags/Web-Development/"/>
    
      <category term="Chrome Extensions" scheme="http://joveyzheng.com/tags/Chrome-Extensions/"/>
    
      <category term="Web Designers" scheme="http://joveyzheng.com/tags/Web-Designers/"/>
    
      <category term="Developers" scheme="http://joveyzheng.com/tags/Developers/"/>
    
  </entry>
  
  <entry>
    <title>博客的新版布局</title>
    <link href="http://joveyzheng.com/2015/12/01/blog-new-layout/"/>
    <id>http://joveyzheng.com/2015/12/01/blog-new-layout/</id>
    <published>2015-12-01T06:12:53.000Z</published>
    <updated>2017-06-15T12:34:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天兴致勃勃去查看了下 Next 主题的更新，发现已经有了新的版本，而且布局也更新了。所以马上就试了试，先来看看变化：</p>
<h4 id="旧版"><a href="#旧版" class="headerlink" title="旧版"></a>旧版</h4><p><img src="/static/images/old-1.png" alt="old-main"></p>
<a id="more"></a>
<p><img src="/static/images/old-2.png" alt="old-detail"></p>
<h4 id="新版"><a href="#新版" class="headerlink" title="新版"></a>新版</h4><p><img src="/static/images/new-1.png" alt="new-main"><br><img src="/static/images/new-2.png" alt="new-detail"></p>
<h2 id="主要改动"><a href="#主要改动" class="headerlink" title="主要改动"></a>主要改动</h2><ul>
<li>修改了 <code>header</code> 的位置和布局</li>
<li>添加了 FontAwsome 的图标</li>
<li>将一部分站点配置，转到 theme 下的 <code>_config.yml</code> 中，如：第三方服务等</li>
<li>添加了<code>阅读次数</code>字段：<code>leancloud_visitors</code></li>
<li>FaceBook SDK 支持：<code>facebook_sdk</code></li>
<li>…</li>
</ul>
<p>很有很多有趣的变化可以自己去发现，有任何疑问或建议可以在下面评论！<br>同时你也可以去<a href="http://notes.iissnan.com/" target="_blank" rel="external"> NexT 作者的博客</a>提问。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天兴致勃勃去查看了下 Next 主题的更新，发现已经有了新的版本，而且布局也更新了。所以马上就试了试，先来看看变化：&lt;/p&gt;
&lt;h4 id=&quot;旧版&quot;&gt;&lt;a href=&quot;#旧版&quot; class=&quot;headerlink&quot; title=&quot;旧版&quot;&gt;&lt;/a&gt;旧版&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/static/images/old-1.png&quot; alt=&quot;old-main&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://joveyzheng.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="blog" scheme="http://joveyzheng.com/tags/blog/"/>
    
      <category term="next" scheme="http://joveyzheng.com/tags/next/"/>
    
      <category term="hexo" scheme="http://joveyzheng.com/tags/hexo/"/>
    
      <category term="pisces" scheme="http://joveyzheng.com/tags/pisces/"/>
    
  </entry>
  
  <entry>
    <title>5 大 Web 开发与设计网站</title>
    <link href="http://joveyzheng.com/2015/11/17/5-top-websites-on-web-design-and-development/"/>
    <id>http://joveyzheng.com/2015/11/17/5-top-websites-on-web-design-and-development/</id>
    <published>2015-11-17T02:23:56.000Z</published>
    <updated>2017-06-15T11:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Web 缺点之一是任何东西都是临时的。<br>技术的发展快如闪电，当你想设计一个新的网站，或是让别人为你设计一个，当前的技术将变得不足以应付。本文将为你介绍很多很好的网站。<br>你需要设计一个让读者难忘的，同时能发表一个声明，并且不会像其它网站一样会让你的读者“尖叫”的网站。<br>你要为你的目标读者提供一个独特而不同于其它的体验，否则你会失去这里读者。</p>
<p>如果你是一个 Web 开发人员或是设计师，那么你会喜欢上这 5 个网站，同时你也会拥有一个志同道合的社区，从中受益并且重新概念化你的品牌和业务价值。</p>
<h1 id="WebDesigner-News"><a href="#WebDesigner-News" class="headerlink" title="WebDesigner News"></a><a href="http://www.webdesignernews.com/" target="_blank" rel="external">WebDesigner News</a></h1><p>这里将列出设计师们的经验，他们会将自己的经验总结成一些“入门级”的文章。<br>其中有些是高技术含量的文章，但也是与 web-friendly 相关的内容。</p>
<h1 id="Smashing-Magazine"><a href="#Smashing-Magazine" class="headerlink" title="Smashing Magazine"></a><a href="http://www.smashingmagazine.com/" target="_blank" rel="external">Smashing Magazine</a></h1><p>一个不仅关注编码和设计的全类型网站，但也可以在这里用设计好设计和编码去触动某人。<br>重点是提供可编辑的内容，从设计的角度而言，它可以作用于在两个主要平台——站点和电子书发布。</p>
<h1 id="Dribble"><a href="#Dribble" class="headerlink" title="Dribble"></a><a href="https://dribbble.com/" target="_blank" rel="external">Dribble</a></h1><p>一个设计师社区，用于展示和分享他们最新的 Web 设计项目。<br>这为你提供了很多与全球的设计师面对面合作的机会，也可以在此获得设计师工作的机会。</p>
<a id="more"></a>
<h1 id="A-List-Apart"><a href="#A-List-Apart" class="headerlink" title="A List Apart"></a><a href="http://alistapart.com/" target="_blank" rel="external">A List Apart</a></h1><p>专注于 Web 相关的设计，开发及意义。<br>你会在这找到你特别关注的 Web 标准和最佳的实践。<br>这个网站附加的价值是，它会为那些及时书写与主题相关的 Web 设计和开发的自由作家支付一笔钱。<br>鲜明的特点是，所有的专家都是来自世界各地。</p>
<h1 id="Awwwards"><a href="#Awwwards" class="headerlink" title="Awwwards"></a><a href="http://www.awwwards.com/" target="_blank" rel="external">Awwwards</a></h1><p>一个 Web 设计师和开发人员展示它们工作成果的网站，同时也希望自己能被发现，识别和获得升职机会。<br>每年，顶级设计师和开发人员选择在一个标志性的城市举行特殊的颁奖典礼。<br>对于 Awwwards 而言，他们正在寻找有用的，创新的，直观的，美丽的而且独特的数字体验。<br>Awwwards 是一个全球性对于知识和灵感“很好”的网站。</p>
<p>现在你明白了吧——这五大网站，不仅仅是展示人才，同时了解 Web 设计人员和开发人员通过这些网站的功能去概念化品牌的知识。这些网站的许多贡献者最大化他们的在线帮助你去建立品牌和让你成为一个志趣相投的社区的一部分。你听说过或与这些网站吗？你有任何其他人分享吗？加入谈话，在下面的评论栏中分享你的想法。</p>
<p><a href="http://www.huffingtonpost.com/dorit-sasson/5-top-websites-on-web-des_b_8481976.html" target="_blank" rel="external"><strong>原文链接</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web 缺点之一是任何东西都是临时的。&lt;br&gt;技术的发展快如闪电，当你想设计一个新的网站，或是让别人为你设计一个，当前的技术将变得不足以应付。本文将为你介绍很多很好的网站。&lt;br&gt;你需要设计一个让读者难忘的，同时能发表一个声明，并且不会像其它网站一样会让你的读者“尖叫”的网站。&lt;br&gt;你要为你的目标读者提供一个独特而不同于其它的体验，否则你会失去这里读者。&lt;/p&gt;
&lt;p&gt;如果你是一个 Web 开发人员或是设计师，那么你会喜欢上这 5 个网站，同时你也会拥有一个志同道合的社区，从中受益并且重新概念化你的品牌和业务价值。&lt;/p&gt;
&lt;h1 id=&quot;WebDesigner-News&quot;&gt;&lt;a href=&quot;#WebDesigner-News&quot; class=&quot;headerlink&quot; title=&quot;WebDesigner News&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.webdesignernews.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebDesigner News&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;这里将列出设计师们的经验，他们会将自己的经验总结成一些“入门级”的文章。&lt;br&gt;其中有些是高技术含量的文章，但也是与 web-friendly 相关的内容。&lt;/p&gt;
&lt;h1 id=&quot;Smashing-Magazine&quot;&gt;&lt;a href=&quot;#Smashing-Magazine&quot; class=&quot;headerlink&quot; title=&quot;Smashing Magazine&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.smashingmagazine.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Smashing Magazine&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一个不仅关注编码和设计的全类型网站，但也可以在这里用设计好设计和编码去触动某人。&lt;br&gt;重点是提供可编辑的内容，从设计的角度而言，它可以作用于在两个主要平台——站点和电子书发布。&lt;/p&gt;
&lt;h1 id=&quot;Dribble&quot;&gt;&lt;a href=&quot;#Dribble&quot; class=&quot;headerlink&quot; title=&quot;Dribble&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://dribbble.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dribble&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一个设计师社区，用于展示和分享他们最新的 Web 设计项目。&lt;br&gt;这为你提供了很多与全球的设计师面对面合作的机会，也可以在此获得设计师工作的机会。&lt;/p&gt;
    
    </summary>
    
      <category term="好文分享" scheme="http://joveyzheng.com/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="译文" scheme="http://joveyzheng.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Web Dedign" scheme="http://joveyzheng.com/tags/Web-Dedign/"/>
    
      <category term="Web Development" scheme="http://joveyzheng.com/tags/Web-Development/"/>
    
      <category term="Websites" scheme="http://joveyzheng.com/tags/Websites/"/>
    
  </entry>
  
  <entry>
    <title>使用 Git 管理项目 - reset 与 rebase</title>
    <link href="http://joveyzheng.com/2015/11/04/use-git-reset-and-rebase/"/>
    <id>http://joveyzheng.com/2015/11/04/use-git-reset-and-rebase/</id>
    <published>2015-11-04T09:49:09.000Z</published>
    <updated>2017-06-15T11:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在日常管理项目的过程中，可能会遇到提交的 commit/merge 并不是想要的，或是操作失误提交了，那么此时我们需要把不想要的 commit/merge 取消掉，如果做到呢？Git 为我们提供了一个 <code>reset</code> command，很好地解决了这个问题。</p>
<h1 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h1><h2 id="1-命令说明"><a href="#1-命令说明" class="headerlink" title="1. 命令说明"></a>1. 命令说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset [--hard|soft|mixed|merge|keep] [&lt;commit&gt;|&lt;HEAD&gt;]</div></pre></td></tr></table></figure>
<p>常用的是 <code>[--hard|soft|mixed]</code>，本文主要使用 <code>--hard</code> 作为例子进行说明。</p>
<h2 id="2-本地仓库"><a href="#2-本地仓库" class="headerlink" title="2. 本地仓库"></a>2. 本地仓库</h2><p>在本地仓库执行 <code>$ git reset --hard HEAD^</code> 可以将本地的仓库回滚到上一次提交时的状态，<code>HEAD^</code> 指的是上一次提交。</p>
<p>同时你也可以执行 <code>$ git reset --hard fc232ae</code> 将其回滚到 <code>fc232ae</code> commit 时的状态。</p>
<h2 id="3-远程仓库"><a href="#3-远程仓库" class="headerlink" title="3. 远程仓库"></a>3. 远程仓库</h2><p>以上操作只会对本地仓库造成影响，而远程仓库的源码和 commit 信息并不会因此改变。那么此时我们需要另外一个 command 来改变远程仓库的状态。</p>
<p><strong>注意，此时不要在上一步的操作之后执行 <code>$ git pull</code> ，因为这个操作会使本地仓库的状态与远程同步。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin [branch] -f</div></pre></td></tr></table></figure></p>
<p>执行此命令后，Git 会将远程仓库的状态与本地仓库的保持一致，即回滚状态。</p>
<a id="more"></a>
<p>在更新代码时，难免一次到位，此时就会生成许许多多的 commit 。比如同一个文件，反复地修改代码，反复地提交，此时会有 5，6 个 commit 甚至更多，那么你会在提交 list 中看到一大串的 commit 记录，会觉得很是头疼，杂乱。此时我们需要把这些 commit 整合以下，合并到一个 commit 中，其他的 commit 都 squash 到第一 commit 中，那么就需要用到 <code>rebase</code>。</p>
<h1 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rebase -i [branch|&lt;commit&gt;]</div></pre></td></tr></table></figure>
<p>你可以直接进入某个分支的 rebase 也可以进入某次 commit 的 rebase，如果你是项将某些 commit 合并，那么建议使用 <code>$ git rebase -i &lt;commit&gt;</code>。</p>
<p>此外 rebase 还提供三个操作命令，分别是 <code>--continue</code>、<code>--absort</code> 和 <code>--skip</code>，这三个命令的意思分别是“继续”、“退出”和“跳过”。</p>
<h2 id="2-查看记录"><a href="#2-查看记录" class="headerlink" title="2. 查看记录"></a>2. 查看记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log</div></pre></td></tr></table></figure>
<p>执行此命令即可看到当前分支下所有的提交记录，然后根据个人需要复制其中的 commit 的 SHA 进行 rebase 操作。</p>
<h2 id="3-rebase"><a href="#3-rebase" class="headerlink" title="3. rebase"></a>3. rebase</h2><p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rebase -i 9cbc329</div></pre></td></tr></table></figure></p>
<p>然后就会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">pick fb554f5 This is commit 1</div><div class="line">pick 2bd1903 This is commit 2</div><div class="line">pick d987ebf This is commit 3</div><div class="line"># Rebase 9cbc329..d987ebf onto 9cbc329</div><div class="line">#</div><div class="line"># Commands:</div><div class="line"># p, pick = use commit</div><div class="line"># r, reword = use commit, but edit the commit message</div><div class="line"># e, edit = use commit, but stop for amending</div><div class="line"># s, squash = use commit, but meld into previous commit</div><div class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</div><div class="line"># x, exec = run command (the rest of the line) using shell</div><div class="line">#</div><div class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</div><div class="line"># However, if you remove everything, the rebase will be aborted.</div><div class="line">#</div></pre></td></tr></table></figure></p>
<p>那么其中 <code>pick fb554f5 This is commit 1</code> 我们可以把它分成三部分去解释：</p>
<ul>
<li><code>pick</code>:：操作，即 rebase command</li>
<li><code>fb554f5</code>：commit shortID，提交的简写 ID</li>
<li><code>This is commit 1</code>： commit message，提交时填写的提交信息</li>
</ul>
<p>此时我们可以看到输出结果中所提供的一些操作方法，比如 <code>pick</code>、<code>squash</code>、<code>edit</code> 等。那么重要的是 <code>pick</code> 和 <code>squash</code>。</p>
<p>接着我们需要把 <code>2bd1903</code> 和 <code>d987ebf</code> 合并到 <code>fb554f5</code> 中，做如下操作（<strong>注意：此时是 VIM 的操作界面，熟悉 Linux 的同学可以无视，不熟悉的可以<a href="#简略的指导">简略的指导</a></strong>）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">pick fb554f5 This is commit 1</div><div class="line">squash 2bd1903 This is commit 2</div><div class="line">squash d987ebf This is commit 3</div><div class="line"># Rebase 9cbc329..d987ebf onto 9cbc329</div><div class="line">#</div><div class="line"># Commands:</div><div class="line"># p, pick = use commit</div><div class="line"># r, reword = use commit, but edit the commit message</div><div class="line"># e, edit = use commit, but stop for amending</div><div class="line"># s, squash = use commit, but meld into previous commit</div><div class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</div><div class="line"># x, exec = run command (the rest of the line) using shell</div><div class="line">#</div><div class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</div><div class="line"># However, if you remove everything, the rebase will be aborted.</div><div class="line">#</div></pre></td></tr></table></figure></p>
<p>在做完以上修改操作后输入 <code>:x</code> 保存文件并退出界面，然后就会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git rebase -i 9cbc329</div><div class="line">rebase in progress; onto 9cbc329</div><div class="line">You are currently rebasing branch &apos;master&apos; on &apos;9cbc329&apos;.</div><div class="line"></div><div class="line">nothing to commit, working directory clean</div><div class="line">The previous cherry-pick is now empty, possibly due to conflict resolution.</div><div class="line">If you wish to commit it anyway, use:</div><div class="line"></div><div class="line">    git commit --allow-empty</div><div class="line"></div><div class="line">Otherwise, please use &apos;git reset&apos;</div><div class="line">Could not apply 9cbc329f722f8e531496da70ee3857b031574b6d... squash commit on rebase</div></pre></td></tr></table></figure></p>
<p>此时用 <code>$ git status</code>  查看会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">rebase in progress; onto 9cbc329</div><div class="line">You are currently rebasing branch &apos;master&apos; on &apos;9cbc329&apos;.</div><div class="line">  (all conflicts fixed: run &quot;git rebase --continue&quot;)</div><div class="line"></div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure></p>
<p>紧接着我们需要执行 <code>$ git rebase --continue</code> 操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git rebase --continue</div><div class="line">[detached HEAD 2bd1903...d987ebf] squash commit on rebase</div><div class="line"> Date: Tue Nov 3 10:09:43 2015 +0800</div><div class="line"> 1 file changed, 149 insertions(+), 154 deletions(-)</div><div class="line"> rewrite test.js (72%)</div><div class="line">Successfully rebased and updated refs/heads/master.</div></pre></td></tr></table></figure></p>
<p>最后我们需要把修改合并好的 commit push 到远程仓库上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin [branch] -f</div></pre></td></tr></table></figure></p>
<p>到此为止，整个 rebase 操作都已完成。<br>你会看到类似：<br><img src="/static/images/4.png" alt="before"><br>变成类似：<br><img src="/static/images/5.png" alt="after"></p>
<h1 id="简略的指导"><a href="#简略的指导" class="headerlink" title="简略的指导"></a>简略的指导</h1><p>在 VIM 的操作界面下，需要按 <code>I/Insert</code> 键进行插入修改文本操作，修改完文本之后需要按 <code>Esc</code> 键退出编辑状态，然后输入 <code>:q</code> 是离开，输入 <code>:!q</code> 是强制离开，输入 <code>:x</code> 是保存修改并离开。<br>在 rebase 修改文本结束后需要输入 <code>:x</code> 进行保存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常管理项目的过程中，可能会遇到提交的 commit/merge 并不是想要的，或是操作失误提交了，那么此时我们需要把不想要的 commit/merge 取消掉，如果做到呢？Git 为我们提供了一个 &lt;code&gt;reset&lt;/code&gt; command，很好地解决了这个问题。&lt;/p&gt;
&lt;h1 id=&quot;reset&quot;&gt;&lt;a href=&quot;#reset&quot; class=&quot;headerlink&quot; title=&quot;reset&quot;&gt;&lt;/a&gt;reset&lt;/h1&gt;&lt;h2 id=&quot;1-命令说明&quot;&gt;&lt;a href=&quot;#1-命令说明&quot; class=&quot;headerlink&quot; title=&quot;1. 命令说明&quot;&gt;&lt;/a&gt;1. 命令说明&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git reset [--hard|soft|mixed|merge|keep] [&amp;lt;commit&amp;gt;|&amp;lt;HEAD&amp;gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常用的是 &lt;code&gt;[--hard|soft|mixed]&lt;/code&gt;，本文主要使用 &lt;code&gt;--hard&lt;/code&gt; 作为例子进行说明。&lt;/p&gt;
&lt;h2 id=&quot;2-本地仓库&quot;&gt;&lt;a href=&quot;#2-本地仓库&quot; class=&quot;headerlink&quot; title=&quot;2. 本地仓库&quot;&gt;&lt;/a&gt;2. 本地仓库&lt;/h2&gt;&lt;p&gt;在本地仓库执行 &lt;code&gt;$ git reset --hard HEAD^&lt;/code&gt; 可以将本地的仓库回滚到上一次提交时的状态，&lt;code&gt;HEAD^&lt;/code&gt; 指的是上一次提交。&lt;/p&gt;
&lt;p&gt;同时你也可以执行 &lt;code&gt;$ git reset --hard fc232ae&lt;/code&gt; 将其回滚到 &lt;code&gt;fc232ae&lt;/code&gt; commit 时的状态。&lt;/p&gt;
&lt;h2 id=&quot;3-远程仓库&quot;&gt;&lt;a href=&quot;#3-远程仓库&quot; class=&quot;headerlink&quot; title=&quot;3. 远程仓库&quot;&gt;&lt;/a&gt;3. 远程仓库&lt;/h2&gt;&lt;p&gt;以上操作只会对本地仓库造成影响，而远程仓库的源码和 commit 信息并不会因此改变。那么此时我们需要另外一个 command 来改变远程仓库的状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意，此时不要在上一步的操作之后执行 &lt;code&gt;$ git pull&lt;/code&gt; ，因为这个操作会使本地仓库的状态与远程同步。&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git push origin [branch] -f&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行此命令后，Git 会将远程仓库的状态与本地仓库的保持一致，即回滚状态。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://joveyzheng.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://joveyzheng.com/tags/git/"/>
    
      <category term="项目管理" scheme="http://joveyzheng.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="reset" scheme="http://joveyzheng.com/tags/reset/"/>
    
      <category term="rebase" scheme="http://joveyzheng.com/tags/rebase/"/>
    
  </entry>
  
  <entry>
    <title>ECharts - 数据图表的使用</title>
    <link href="http://joveyzheng.com/2015/10/16/use-echarts/"/>
    <id>http://joveyzheng.com/2015/10/16/use-echarts/</id>
    <published>2015-10-16T10:14:23.000Z</published>
    <updated>2017-06-15T11:54:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/static/images/3.png" alt="ECharts"></p>
<h1 id="关于ECharts（ECharts）"><a href="#关于ECharts（ECharts）" class="headerlink" title="关于ECharts（ECharts）"></a>关于ECharts（<a href="http://echarts.baidu.com/doc/about.html" target="_blank" rel="external">ECharts</a>）</h1><p>ECharts 是百度提供的一款开源、功能强大的数据可视化产品。<br>主要提供折线图、柱状图、散点图、K线图、饼图、雷达图、地图、和弦图、力导向布局图、仪表盘以及漏斗图。</p>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul>
<li>拖拽重计算</li>
<li>数据视图</li>
<li>多图联动</li>
<li>值域漫游</li>
<li>炫光特效<br>……</li>
</ul>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>下载 ECharts 静态包<a href="http://echarts.baidu.com/build/echarts-2.2.7.zip" target="_blank" rel="external">【echarts-2.2.7】</a>，也可以直接使用链接进行加载。建议下载静态包，避免官方 <strong>更新新特性</strong> 时造成图表无法正常呈现的问题。</p>
<a id="more"></a>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>ECharts的使用很简单，以官方提供的为例分为下面几步：</p>
<h4 id="1-新建一个-test-html-并放置一个-div-来承载图表："><a href="#1-新建一个-test-html-并放置一个-div-来承载图表：" class="headerlink" title="1. 新建一个 test.html 并放置一个 div 来承载图表："></a>1. 新建一个 <code>test.html</code> 并放置一个 <code>div</code> 来承载图表：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"height: 400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-引入-echarts-js-："><a href="#2-引入-echarts-js-：" class="headerlink" title="2. 引入 echarts.js ："></a>2. 引入 <code>echarts.js</code> ：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;http://echarts.baidu.com/build/dist/echarts.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="3-添加模块加载器配置-echarts-和所需图表的路径（相对路径为从当前页面链接到echarts-js），引入图表文件见引入-ECharts2："><a href="#3-添加模块加载器配置-echarts-和所需图表的路径（相对路径为从当前页面链接到echarts-js），引入图表文件见引入-ECharts2：" class="headerlink" title="3. 添加模块加载器配置 echarts 和所需图表的路径（相对路径为从当前页面链接到echarts.js），引入图表文件见引入 ECharts2："></a>3. 添加模块加载器配置 echarts 和所需图表的路径（相对路径为从当前页面链接到echarts.js），引入图表文件见<a href="http://echarts.baidu.com/doc/doc.html#引入ECharts2" target="_blank" rel="external">引入 ECharts2</a>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    // 路径配置</div><div class="line">    require.config(&#123;</div><div class="line">        paths: &#123;</div><div class="line">          echarts: &apos;http://echarts.baidu.com/build/dist&apos;</div><div class="line">        &#125;</div><div class="line">     &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="4-动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见API-amp-Doc："><a href="#4-动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见API-amp-Doc：" class="headerlink" title="4. 动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见API &amp; Doc："></a>4. 动态加载echarts和所需图表，回调函数中可以初始化图表并驱动图表的生成，option见<a href="http://echarts.baidu.com/doc/doc.html#Option" target="_blank" rel="external">API &amp; Doc</a>：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">require(</div><div class="line">    [</div><div class="line">        &apos;echarts&apos;,</div><div class="line">        &apos;echarts/chart/bar&apos; // 使用柱状图就加载bar模块，按需加载</div><div class="line">    ],</div><div class="line">    function (ec) &#123;</div><div class="line">        // 基于准备好的dom，初始化echarts图表</div><div class="line">        var myChart = ec.init(document.getElementById(&apos;main&apos;));</div><div class="line"></div><div class="line">        var option = &#123;</div><div class="line">            tooltip: &#123;</div><div class="line">                show: true</div><div class="line">            &#125;,</div><div class="line">            legend: &#123;</div><div class="line">                data:[&apos;销量&apos;]</div><div class="line">            &#125;,</div><div class="line">            xAxis : [</div><div class="line">                &#123;</div><div class="line">                    type : &apos;category&apos;,</div><div class="line">                    data : [&quot;衬衫&quot;,&quot;羊毛衫&quot;,&quot;雪纺衫&quot;,&quot;裤子&quot;,&quot;高跟鞋&quot;,&quot;袜子&quot;]</div><div class="line">                &#125;</div><div class="line">            ],</div><div class="line">            yAxis : [</div><div class="line">                &#123;</div><div class="line">                    type : &apos;value&apos;</div><div class="line">                &#125;</div><div class="line">            ],</div><div class="line">            series : [</div><div class="line">                &#123;</div><div class="line">                    &quot;name&quot;:&quot;销量&quot;,</div><div class="line">                    &quot;type&quot;:&quot;bar&quot;,</div><div class="line">                    &quot;data&quot;:[5, 20, 40, 10, 10, 20]</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        // 为echarts对象加载数据</div><div class="line">        myChart.setOption(option);</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h4 id="5-最后的样子："><a href="#5-最后的样子：" class="headerlink" title="5. 最后的样子："></a>5. 最后的样子：</h4><p><img src="/static/images/3-1.png" alt=""></p>
<h1 id="重点-option-部分相关配置说明"><a href="#重点-option-部分相关配置说明" class="headerlink" title="重点- option 部分相关配置说明"></a>重点- option 部分相关配置说明</h1><p>用户可以在 option 配置里自定义图标的样式。</p>
<ul>
<li><p>title 标题：<br><img src="/static/images/3-2.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title : &#123;</div><div class="line">    text: &apos;某地区蒸发量和降水量&apos;,  //文本</div><div class="line">    subtext: &apos;纯属虚构&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>toolbox 便捷的工具：<br><img src="/static/images/3-3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">toolbox: &#123;</div><div class="line">    show : true,  //是否显示工具栏</div><div class="line">    feature : &#123;  //特性</div><div class="line">        mark : &#123;show: true&#125;,  //辅助线</div><div class="line">        dataView : &#123;show: true, readOnly: false&#125;,  //数据视图</div><div class="line">        magicType : &#123;show: true, type: [&apos;line&apos;, &apos;bar&apos;]&#125;,  //切换视图（折线/柱状）</div><div class="line">        restore : &#123;show: true&#125;,  //重新加载视图</div><div class="line">        saveAsImage : &#123;show: true&#125;  //保存该视图为图片</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>series 数据列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">series : [</div><div class="line">&#123;</div><div class="line">    name:&apos;蒸发量&apos;,  //名称</div><div class="line">    type:&apos;bar&apos;,  //视图类型</div><div class="line">    data:[2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3],  //数据</div><div class="line">    markPoint : &#123;  //标记</div><div class="line">        data : [</div><div class="line">            &#123;type : &apos;max&apos;, name: &apos;最大值&apos;&#125;,  //最大值，name为显示文本</div><div class="line">            &#123;type : &apos;min&apos;, name: &apos;最小值&apos;&#125;  //最小值，name为显示文本</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    markLine : &#123;  //标线</div><div class="line">        data : [</div><div class="line">            &#123;type : &apos;average&apos;, name: &apos;平均值&apos;&#125;  //平均值，name为显示文本</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>xAxis ： X 轴</p>
</li>
<li>yAxis ： Y 轴</li>
<li>legend ：<br><img src="/static/images/3-4.png" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">legend: &#123;</div><div class="line">    orient : &apos;vertical&apos;,  //方向“垂直”，默认从左向右横向排列</div><div class="line">    x : &apos;left&apos;,  //位于 X 轴左侧，默认顶部居中</div><div class="line">    data:[&apos;直接访问&apos;,&apos;邮件营销&apos;,&apos;联盟广告&apos;,&apos;视频广告&apos;,&apos;搜索引擎&apos;]  //显示文本</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>更多配置可在<a href="http://echarts.baidu.com/doc/example.html" target="_blank" rel="external">【实例】</a>中点开测试。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://echarts.baidu.com/doc/start.html" target="_blank" rel="external">入门教程</a></li>
<li><a href="http://echarts.baidu.com/doc/example.html" target="_blank" rel="external">实例</a></li>
<li><a href="https://github.com/ecomfe/echarts" target="_blank" rel="external">Fork on github</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/static/images/3.png&quot; alt=&quot;ECharts&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;关于ECharts（ECharts）&quot;&gt;&lt;a href=&quot;#关于ECharts（ECharts）&quot; class=&quot;headerlink&quot; title=&quot;关于ECharts（ECharts）&quot;&gt;&lt;/a&gt;关于ECharts（&lt;a href=&quot;http://echarts.baidu.com/doc/about.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECharts&lt;/a&gt;）&lt;/h1&gt;&lt;p&gt;ECharts 是百度提供的一款开源、功能强大的数据可视化产品。&lt;br&gt;主要提供折线图、柱状图、散点图、K线图、饼图、雷达图、地图、和弦图、力导向布局图、仪表盘以及漏斗图。&lt;/p&gt;
&lt;h1 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;拖拽重计算&lt;/li&gt;
&lt;li&gt;数据视图&lt;/li&gt;
&lt;li&gt;多图联动&lt;/li&gt;
&lt;li&gt;值域漫游&lt;/li&gt;
&lt;li&gt;炫光特效&lt;br&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;下载 ECharts 静态包&lt;a href=&quot;http://echarts.baidu.com/build/echarts-2.2.7.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【echarts-2.2.7】&lt;/a&gt;，也可以直接使用链接进行加载。建议下载静态包，避免官方 &lt;strong&gt;更新新特性&lt;/strong&gt; 时造成图表无法正常呈现的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记随笔" scheme="http://joveyzheng.com/categories/%E7%AC%94%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="ECharts" scheme="http://joveyzheng.com/tags/ECharts/"/>
    
      <category term="js" scheme="http://joveyzheng.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>更新 Github 的 Fork 代码</title>
    <link href="http://joveyzheng.com/2015/10/06/use-git-update-fork-code/"/>
    <id>http://joveyzheng.com/2015/10/06/use-git-update-fork-code/</id>
    <published>2015-10-06T08:46:12.000Z</published>
    <updated>2017-06-15T12:35:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/" target="_blank" rel="external">github</a> 提供了一个非常便捷的功能叫 <strong>Fork</strong>，即用户可以很方便的从别的仓库中复制一份代码到自己的名下。但是有一个不足是 <a href="https://github.com/" target="_blank" rel="external">github</a> 并不提供自动更新功能，那么此时就需要我们自己手动更新这个 <strong>Fork</strong> 仓库代码。</p>
<h1 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h1><ol>
<li>安装 <a href="https://desktop.github.com/" target="_blank" rel="external">github客户端</a> 或者 <a href="http://www.git-scm.com/download/" target="_blank" rel="external">Git</a>。</li>
<li><p><strong>clone</strong> 需要更新的 <strong>Fork</strong> 分支到本地：</p>
<ul>
<li>github客户端：直接打开客户端，添加 <strong>Fork</strong> 分支，然后<strong> clone</strong>。</li>
<li>Git命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:yourname/repos.git &lt;yourfolder&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>注</strong>：github客户端 <strong>clone</strong> 成功后，可以使用 <strong>git bash</strong> 进行命令行输入。</p>
</li>
<li><p>将源分支添加到该仓库的远程分支中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add author git@github.com:author/repos.git</div></pre></td></tr></table></figure>
<p>此时可以使用 <code>$ git remote -v</code> 查看远程分支列表，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">author git@github.com:author/repos.git (fetch)</div><div class="line">author git@github.com:author/repos.git (push)</div><div class="line">origin  git@github.com:yourname/repos.git (fetch)</div><div class="line">origin  git@github.com:yourname/repos.git (push)</div></pre></td></tr></table></figure>
</li>
<li><p><strong>fetch</strong> 源仓库代码的最新版本到本地：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch author   //这里的`author`是上面从源分支添加到远程分支的分支名</div></pre></td></tr></table></figure>
</li>
<li><p>合并两个版本的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge author/master</div></pre></td></tr></table></figure>
</li>
<li><p>将本地代码更新到 <strong>Fork</strong> 仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><p>重复上述的1-3，然后使用 <code>git pull author master</code> 把源仓库的最新代码拉下来，然后使用第6步的方法，将代码推到自己的 fork 的仓库中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt; 提供了一个非常便捷的功能叫 &lt;strong&gt;Fork&lt;/strong&gt;，即用户可以很方便的从别的仓库中复制一份代码到自己的名下。但
    
    </summary>
    
      <category term="笔记随笔" scheme="http://joveyzheng.com/categories/%E7%AC%94%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="项目管理" scheme="http://joveyzheng.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="Git" scheme="http://joveyzheng.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo + NexT 搭建静态博客</title>
    <link href="http://joveyzheng.com/2015/09/18/use-hexo-and-next-to-build-blog/"/>
    <id>http://joveyzheng.com/2015/09/18/use-hexo-and-next-to-build-blog/</id>
    <published>2015-09-18T07:06:37.000Z</published>
    <updated>2017-06-15T12:34:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://github.com/" target="_blank" rel="external">Github </a>为广大开发者提供了一个非常好的平台，不仅是代码的开源，同时<a href="https://github.com/" target="_blank" rel="external"> Github </a>还提供了开发者可以在<a href="https://github.com/" target="_blank" rel="external"> Github </a>上建立自己的站点（GithubPage）的一个非常有意思的功能。这个功能的局限是只能创建静态的网站，那么我们可以使用一些工具来快速创建这一网站。<br>本文旨在帮助刚接触<a href="https://github.com/" target="_blank" rel="external"> Github </a>新手，想利用<a href="https://github.com/" target="_blank" rel="external"> Github </a>来创建自己的站点、个人博客等。大神可以忽视<strong>(:з」∠)</strong>。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>你需要在<a href="https://github.com/" target="_blank" rel="external"> Github </a>上创建一个属于自己的账户，然后新建一个仓库（<code>new repository</code>），并命名为 <code>YourSiteName.github.io/com</code>，此时<a href="https://github.com/" target="_blank" rel="external"> Github </a>会帮助你初始化一个静态网页，你可以根据自己的喜好选择一些模版（<del>这都不是重点</del>），接着尝试访问下你所建的站点，成功后就可以开始动工了。</p>
<h1 id="关于-Hexo"><a href="#关于-Hexo" class="headerlink" title="关于 Hexo"></a>关于 Hexo</h1><ul>
<li><strong>A fast, simple &amp; powerful blog framework</strong></li>
<li><strong>快速，简单而高效的静态博客框架</strong><ul>
<li><strong>超快速度：</strong> Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>
<li><strong>支持 Markdown：</strong> Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>
<li><strong>一键部署：</strong> 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li>
<li><strong>丰富的插件：</strong> Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li>
</ul>
</li>
</ul>
<h1 id="关于NexT"><a href="#关于NexT" class="headerlink" title="关于NexT"></a>关于NexT</h1><p><img src="/static/images/hexo-next.jpg" alt="Theme-NexT"></p>
<ul>
<li><strong>NexT is built for easily use with elegant appearance. First things first, always keep things simple</strong></li>
<li><strong>NexT 主旨在于简洁优雅且易于使用，所以首先要尽量确保 NexT 的简洁易用性。</strong></li>
</ul>
<p>这是一个扩展主题，由<a href="https://github.com/iissnan" target="_blank" rel="external"> iissnan </a>开发，<code>精于心，简于形</code>的理念。</p>
<a id="more"></a>
<h1 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h1><p>上面是对搭建博客的一些技术了解，接下来进入正题。</p>
<h2 id="Hexo-初始化博客框架"><a href="#Hexo-初始化博客框架" class="headerlink" title="Hexo 初始化博客框架"></a>Hexo 初始化博客框架</h2><h3 id="1-安装-Hexo"><a href="#1-安装-Hexo" class="headerlink" title="1. 安装 Hexo"></a>1. 安装 Hexo</h3><p>Hexo 安装和搭建依赖<a href="https://nodejs.org/en/" target="_blank" rel="external"> Nodejs </a>和<a href="http://git-scm.com/" target="_blank" rel="external"> Git </a>，可自行下载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<h3 id="2-初始化框架"><a href="#2-初始化框架" class="headerlink" title="2. 初始化框架"></a>2. 初始化框架</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;yourFolder&gt;</div><div class="line">$ cd &lt;yourFolder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p> 初始化完成大概的目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml //网站的 配置 信息，您可以在此配置大部分的参数。</div><div class="line">├── package.json</div><div class="line">├── scaffolds 	//模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</div><div class="line">├── source 	//资源文件夹是存放用户资源的地方。</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes 	//主题 文件夹。Hexo 会根据主题来生成静态页面。</div></pre></td></tr></table></figure></p>
<h3 id="3-新建文章（创建一个-Hello-World）"><a href="#3-新建文章（创建一个-Hello-World）" class="headerlink" title="3. 新建文章（创建一个 Hello World）"></a>3. 新建文章（创建一个 Hello World）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;Hello World&quot;</div></pre></td></tr></table></figure>
<p> 在 <code>/source/_post</code> 里添加 <code>hello-world.md</code> 文件，之后新建的文章都将存放在此目录下。</p>
<h3 id="4-生成网站"><a href="#4-生成网站" class="headerlink" title="4. 生成网站"></a>4. 生成网站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p> 此时会将 <code>/source</code> 的 <code>.md</code> 文件生成到 <code>/public</code> 中，形成网站的静态文件。</p>
<h3 id="5-服务器"><a href="#5-服务器" class="headerlink" title="5. 服务器"></a>5. 服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server -p 3000</div></pre></td></tr></table></figure>
<p> 输入 <code>http://localhost:3000</code> 即可查看网站。</p>
<h3 id="6-部署网站"><a href="#6-部署网站" class="headerlink" title="6. 部署网站"></a>6. 部署网站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p> 部署网站之前需要生成静态文件，即可以用 <code>$ hexo generate -d</code> 直接生成并部署。此时需要在 <code>_config.yml</code> 中配置你所要部署的站点：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">## Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:YourRepository.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h3 id="7-更多"><a href="#7-更多" class="headerlink" title="7. 更多"></a>7. 更多</h3><ul>
<li>官网 - <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">[Hexo]</a></li>
<li>配置相关 - <a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">[Hexo | 配置]</a></li>
<li>更多的命令 - <a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">[Hexo | 指令]</a></li>
</ul>
<p>那么到此为止网站的雏形算是完成了，接下来你就要自己去管理和完善个人网站了。</p>
<h2 id="使用-NexT-主题让站点更酷炫"><a href="#使用-NexT-主题让站点更酷炫" class="headerlink" title="使用 NexT 主题让站点更酷炫"></a>使用 NexT 主题让站点更酷炫</h2><h3 id="1-使用"><a href="#1-使用" class="headerlink" title="1. 使用"></a>1. 使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p> 从Next的 <code>Gihub</code> 仓库中获取最新版本。</p>
<h3 id="2-启用"><a href="#2-启用" class="headerlink" title="2. 启用"></a>2. 启用</h3><p>需要修改 <code>/root/_config.yml</code> 配置项 <code>theme</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">## Themes: http://hexo.io/themes/</div><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<h3 id="3-验证是否启用"><a href="#3-验证是否启用" class="headerlink" title="3. 验证是否启用"></a>3. 验证是否启用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s --debug</div></pre></td></tr></table></figure>
<p> 访问 <code>http://localhost:4000</code>，确保站点正确运行。（<del>此命令可以做平时预览用</del>）</p>
<h3 id="4-更多"><a href="#4-更多" class="headerlink" title="4. 更多"></a>4. 更多</h3><ul>
<li>Next官网 - <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">[NexT]</a></li>
<li>主题设定 - <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">[NexT | 主题设定]</a></li>
<li>第三方服务 - <a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">[NexT | 第三方服务]</a></li>
</ul>
<p>启用 <code>NexT</code> 主题成功，那么你的网站变得酷炫（简约）。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><a href="http://jovey-zheng.github.io/blog" target="_blank" rel="external">我的博客</a><br><a href="http://notes.iissnan.com/" target="_blank" rel="external">NexT 官方实例</a></p>
<p><strong> 有任何疑问和建议可以留言，将在第一时间为你解答 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github &lt;/a&gt;为广大开发者提供了一个非常好的平台，不仅是代码的开源，同时&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Github &lt;/a&gt;还提供了开发者可以在&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Github &lt;/a&gt;上建立自己的站点（GithubPage）的一个非常有意思的功能。这个功能的局限是只能创建静态的网站，那么我们可以使用一些工具来快速创建这一网站。&lt;br&gt;本文旨在帮助刚接触&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Github &lt;/a&gt;新手，想利用&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Github &lt;/a&gt;来创建自己的站点、个人博客等。大神可以忽视&lt;strong&gt;(:з」∠)&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;你需要在&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Github &lt;/a&gt;上创建一个属于自己的账户，然后新建一个仓库（&lt;code&gt;new repository&lt;/code&gt;），并命名为 &lt;code&gt;YourSiteName.github.io/com&lt;/code&gt;，此时&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Github &lt;/a&gt;会帮助你初始化一个静态网页，你可以根据自己的喜好选择一些模版（&lt;del&gt;这都不是重点&lt;/del&gt;），接着尝试访问下你所建的站点，成功后就可以开始动工了。&lt;/p&gt;
&lt;h1 id=&quot;关于-Hexo&quot;&gt;&lt;a href=&quot;#关于-Hexo&quot; class=&quot;headerlink&quot; title=&quot;关于 Hexo&quot;&gt;&lt;/a&gt;关于 Hexo&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A fast, simple &amp;amp; powerful blog framework&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速，简单而高效的静态博客框架&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;超快速度：&lt;/strong&gt; Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 Markdown：&lt;/strong&gt; Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一键部署：&lt;/strong&gt; 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丰富的插件：&lt;/strong&gt; Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;关于NexT&quot;&gt;&lt;a href=&quot;#关于NexT&quot; class=&quot;headerlink&quot; title=&quot;关于NexT&quot;&gt;&lt;/a&gt;关于NexT&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/static/images/hexo-next.jpg&quot; alt=&quot;Theme-NexT&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NexT is built for easily use with elegant appearance. First things first, always keep things simple&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NexT 主旨在于简洁优雅且易于使用，所以首先要尽量确保 NexT 的简洁易用性。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是一个扩展主题，由&lt;a href=&quot;https://github.com/iissnan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; iissnan &lt;/a&gt;开发，&lt;code&gt;精于心，简于形&lt;/code&gt;的理念。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记随笔" scheme="http://joveyzheng.com/categories/%E7%AC%94%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hexo" scheme="http://joveyzheng.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://joveyzheng.com/tags/NexT/"/>
    
      <category term="github" scheme="http://joveyzheng.com/tags/github/"/>
    
      <category term="博客" scheme="http://joveyzheng.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>NPM 一些常用命令</title>
    <link href="http://joveyzheng.com/2015/09/17/use-npm-command/"/>
    <id>http://joveyzheng.com/2015/09/17/use-npm-command/</id>
    <published>2015-09-17T07:57:11.000Z</published>
    <updated>2017-06-15T11:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于NPM"><a href="#关于NPM" class="headerlink" title="关于NPM"></a>关于NPM</h1><p>NPM 的全称是 Node Package Manager，是一个 NodeJS 包管理和分发工具，已经成为了非官方的发布 Node 模块（包）的标准。<br>就目前而言，NPM 的官网<a href="https://www.npmjs.com/" target="_blank" rel="external">[1]</a>拥有 18 万的 packages。国内的镜像是淘宝所提供的 CNPM<a href="http://npm.taobao.org/" target="_blank" rel="external">[2]</a>，与 NPM 相同，它会每隔 10 分钟就同步一次。</p>
<h1 id="一些常用命令"><a href="#一些常用命令" class="headerlink" title="一些常用命令"></a>一些常用命令</h1><ul>
<li><code>npm -v</code>: 查看 npm 安装的版本</li>
<li><code>npm init</code>: 引导你创建一个 package.json 文件，包括名称、版本、作者这些信息等</li>
<li><code>npm install &lt;modulename&gt;</code>: 安装模块</li>
<li><code>npm install &lt;modulename&gt; -g</code>: 安装全局模块</li>
<li><code>npm install &lt;modulename&gt;@1.0.0</code>: 安装指定版本的模块</li>
<li><p><code>npm install &lt;modulename&gt; -save</code>: 安装模块并添加到 package.json 依赖中</p>
</li>
<li><p><code>npm uninstall &lt;modulename&gt;</code>: 卸载模块</p>
</li>
<li><p><code>npm cache clean</code>: 清除缓存</p>
</li>
<li><p><code>npm help</code>: 查看帮助命令</p>
</li>
<li><code>npm ls</code>: 查看当前目录安装的依赖</li>
<li><code>npm ls -g</code>: 查看全局目录安装的依赖</li>
</ul>
<a id="more"></a>
<ul>
<li><code>npm view &lt;modulename&gt;</code>: 查看包的 package.json</li>
<li><code>npm view &lt;modulename&gt; dependencies</code>: 查看包的依赖关系</li>
<li><p><code>npm view &lt;modulename&gt; repository.url</code>: 查看包的源文件地址</p>
</li>
<li><p><code>npm update &lt;modulename&gt;</code>: 更新模块</p>
</li>
<li><code>npm remove &lt;modulename&gt;</code>: 移除模块</li>
</ul>
<h1 id="题外话CNPM"><a href="#题外话CNPM" class="headerlink" title="题外话CNPM"></a>题外话CNPM</h1><p>有时候会出现NPM无法使用的情况，此时可以尝试使用 CNPM 解决此问题。</p>
<h2 id="淘宝NPM镜像"><a href="#淘宝NPM镜像" class="headerlink" title="淘宝NPM镜像"></a>淘宝NPM镜像</h2><p>这是一个完整 <code>npmjs.org</code> 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10 分钟一次以保证尽量与官方服务同步。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>与NPM类似，将<code>npm install &lt;...&gt;</code>改为<code>cpm install &lt;...&gt;</code></p>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>更多命令参考文档<a href="https://docs.npmjs.com/" target="_blank" rel="external">[3]</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于NPM&quot;&gt;&lt;a href=&quot;#关于NPM&quot; class=&quot;headerlink&quot; title=&quot;关于NPM&quot;&gt;&lt;/a&gt;关于NPM&lt;/h1&gt;&lt;p&gt;NPM 的全称是 Node Package Manager，是一个 NodeJS 包管理和分发工具，已经成为了非官方的发布 Node 模块（包）的标准。&lt;br&gt;就目前而言，NPM 的官网&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[1]&lt;/a&gt;拥有 18 万的 packages。国内的镜像是淘宝所提供的 CNPM&lt;a href=&quot;http://npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[2]&lt;/a&gt;，与 NPM 相同，它会每隔 10 分钟就同步一次。&lt;/p&gt;
&lt;h1 id=&quot;一些常用命令&quot;&gt;&lt;a href=&quot;#一些常用命令&quot; class=&quot;headerlink&quot; title=&quot;一些常用命令&quot;&gt;&lt;/a&gt;一些常用命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm -v&lt;/code&gt;: 查看 npm 安装的版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm init&lt;/code&gt;: 引导你创建一个 package.json 文件，包括名称、版本、作者这些信息等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install &amp;lt;modulename&amp;gt;&lt;/code&gt;: 安装模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install &amp;lt;modulename&amp;gt; -g&lt;/code&gt;: 安装全局模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install &amp;lt;modulename&amp;gt;@1.0.0&lt;/code&gt;: 安装指定版本的模块&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install &amp;lt;modulename&amp;gt; -save&lt;/code&gt;: 安装模块并添加到 package.json 依赖中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm uninstall &amp;lt;modulename&amp;gt;&lt;/code&gt;: 卸载模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm cache clean&lt;/code&gt;: 清除缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm help&lt;/code&gt;: 查看帮助命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm ls&lt;/code&gt;: 查看当前目录安装的依赖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm ls -g&lt;/code&gt;: 查看全局目录安装的依赖&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="开发日常" scheme="http://joveyzheng.com/categories/%E5%BC%80%E5%8F%91%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="npm" scheme="http://joveyzheng.com/tags/npm/"/>
    
      <category term="module" scheme="http://joveyzheng.com/tags/module/"/>
    
      <category term="nodejs" scheme="http://joveyzheng.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Brunch：快捷的HTML5构建工具</title>
    <link href="http://joveyzheng.com/2015/09/08/use-brunch/"/>
    <id>http://joveyzheng.com/2015/09/08/use-brunch/</id>
    <published>2015-09-08T06:48:25.000Z</published>
    <updated>2017-06-15T11:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/static/images/2.png" alt="Brunch"></p>
<h1 id="了解-Brunch（官方介绍）"><a href="#了解-Brunch（官方介绍）" class="headerlink" title="了解 Brunch（官方介绍）"></a>了解 Brunch（官方介绍）</h1><ul>
<li>编译你的脚本，模板，样式，链接它们</li>
<li>将脚本和模板封装进 common.js/AMD 模块里，链接脚本和样式</li>
<li>为链接文件生成源地图，复制资源和静态文件</li>
<li>通过缩减代码和优化图片来收缩输出，看管你的文件更改</li>
<li>并且通过控制台和系统提示通知你错误</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>当你已经拥有 Nodejs 时（若没有，请到<a href="http://nodejs.org" target="_blank" rel="external"> nodejs 官网</a>下载），就可以直接使用 <code>npm</code> 运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g brunch</div></pre></td></tr></table></figure></p>
<h1 id="新建-new"><a href="#新建-new" class="headerlink" title="新建 new"></a>新建 new</h1><ul>
<li>新建一个 Brunch<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brunch new &lt;skeleton-URL&gt; [optional-output-dir]</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>new</code> 可以简写为 <code>n</code>。<br><code>&lt;skeleton-URL&gt;</code> 指定一个架构，则项目会应用此架构进行初始化。<br><code>[optional-output-dir]</code> 指定输出目录，项目名称可以自定义。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ brunch n https://github.com/scotch/angular-brunch-seed myProject</div><div class="line">08 Sep 12:20:32 - log: Cloning git repo &quot;https://github.com/scotch/angular-brunc                                                                       h-seed&quot; to &quot;E:\myProject&quot;...</div><div class="line">08 Sep 12:20:49 - log: Created skeleton directory layout</div><div class="line">08 Sep 12:20:49 - log: Installing packages...</div></pre></td></tr></table></figure></p>
<p>当不指定输出文件夹时，必须保证放置新项目的文件夹为空，否则会 <code>clone</code> 失败。<br><a id="more"></a></p>
<h1 id="构建-build"><a href="#构建-build" class="headerlink" title="构建 build"></a>构建 build</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brunch build --production</div></pre></td></tr></table></figure>
<p>也可以简写为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brunch b -P</div></pre></td></tr></table></figure></p>
<p>这样构建一个分布式项目，使得项目的体积变小。</p>
<h1 id="使用-watch"><a href="#使用-watch" class="headerlink" title="使用 watch"></a>使用 watch</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brunch watch --server</div></pre></td></tr></table></figure>
<p>也可以简写为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brunch w -s</div></pre></td></tr></table></figure></p>
<p>让 Brunch 看管你的项目，然后你就可以运行项目了。输出结果如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">08 Sep 12:32:58 - error: &#123; [Error: Component must have &quot;E:\w\bower_components\console-polyfill\bower.json&quot;] code: &apos;NO_BOWER_JSON&apos; &#125;</div><div class="line">08 Sep 12:32:59 - info: application started on http://localhost:3333/</div><div class="line">08 Sep 12:33:00 - warn: &apos;test\karma-e2e.conf.js&apos; compiled, but not written. Check your javascripts.joinTo config.</div></pre></td></tr></table></figure></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li><p><strong>必要安装项</strong><br>Git 安装：<a href="http://git-scm.com" target="_blank" rel="external">Git</a><br>bower 安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g bower</div></pre></td></tr></table></figure>
</li>
<li><p><strong>运行项目前</strong><br>执行 <code>$ bower install</code> 对项目初始化。</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://brunch.io/" target="_blank" rel="external">【官网】</a><a href="https://github.com/brunch/brunch/tree/master/docs" target="_blank" rel="external">【README】</a><a href="https://github.com/brunch/brunch/blob/master/docs/commands.md" target="_blank" rel="external">【Command】</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/static/images/2.png&quot; alt=&quot;Brunch&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;了解-Brunch（官方介绍）&quot;&gt;&lt;a href=&quot;#了解-Brunch（官方介绍）&quot; class=&quot;headerlink&quot; title=&quot;了解 Brunch（官方介绍）&quot;&gt;&lt;/a&gt;了解 Brunch（官方介绍）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编译你的脚本，模板，样式，链接它们&lt;/li&gt;
&lt;li&gt;将脚本和模板封装进 common.js/AMD 模块里，链接脚本和样式&lt;/li&gt;
&lt;li&gt;为链接文件生成源地图，复制资源和静态文件&lt;/li&gt;
&lt;li&gt;通过缩减代码和优化图片来收缩输出，看管你的文件更改&lt;/li&gt;
&lt;li&gt;并且通过控制台和系统提示通知你错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;当你已经拥有 Nodejs 时（若没有，请到&lt;a href=&quot;http://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; nodejs 官网&lt;/a&gt;下载），就可以直接使用 &lt;code&gt;npm&lt;/code&gt; 运行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g brunch&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;新建-new&quot;&gt;&lt;a href=&quot;#新建-new&quot; class=&quot;headerlink&quot; title=&quot;新建 new&quot;&gt;&lt;/a&gt;新建 new&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;新建一个 Brunch&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ brunch new &amp;lt;skeleton-URL&amp;gt; [optional-output-dir]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt; 可以简写为 &lt;code&gt;n&lt;/code&gt;。&lt;br&gt;&lt;code&gt;&amp;lt;skeleton-URL&amp;gt;&lt;/code&gt; 指定一个架构，则项目会应用此架构进行初始化。&lt;br&gt;&lt;code&gt;[optional-output-dir]&lt;/code&gt; 指定输出目录，项目名称可以自定义。&lt;/p&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ brunch n https://github.com/scotch/angular-brunch-seed myProject&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;08 Sep 12:20:32 - log: Cloning git repo &amp;quot;https://github.com/scotch/angular-brunc                                                                       h-seed&amp;quot; to &amp;quot;E:\myProject&amp;quot;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;08 Sep 12:20:49 - log: Created skeleton directory layout&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;08 Sep 12:20:49 - log: Installing packages...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当不指定输出文件夹时，必须保证放置新项目的文件夹为空，否则会 &lt;code&gt;clone&lt;/code&gt; 失败。&lt;br&gt;
    
    </summary>
    
      <category term="笔记随笔" scheme="http://joveyzheng.com/categories/%E7%AC%94%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Brunch" scheme="http://joveyzheng.com/tags/Brunch/"/>
    
      <category term="构建工具" scheme="http://joveyzheng.com/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用 Git 管理项目 - 初始化</title>
    <link href="http://joveyzheng.com/2015/09/07/use-git-initialize/"/>
    <id>http://joveyzheng.com/2015/09/07/use-git-initialize/</id>
    <published>2015-09-07T07:57:59.000Z</published>
    <updated>2017-06-15T11:57:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h1><p>获取 Git 仓库的方式主要分为两种。第一种是在现有项目或目录下导入所有文件到 Git 中；第二种是从一个服务器克隆一个现有的 Git 仓库。</p>
<h2 id="GIT-INIT"><a href="#GIT-INIT" class="headerlink" title="GIT INIT"></a>GIT INIT</h2><p>首先在现有的项目目录下输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure></p>
<p>这样就简单将你的目录转变成一个Git仓库。该命令将创建一个名为 <code>.git</code> 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。</p>
<p>如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add .  //`.` 是将目录的所有文件都添加（不包括空文件夹）</div><div class="line">$ git commit -m &apos;first commit&apos;  //提交修改（`&apos;first commit&apos;` 为注释信息）</div></pre></td></tr></table></figure></p>
<p>此时可以使用 <code>$ git status</code> 来查看当前文件状态。<br>我们还可以将项目加入到远程Git仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:jovey-zheng/test.git  //加入到远程的 Git 仓库</div><div class="line">$ git push -u origin master  //将项目推到 Git 仓库</div></pre></td></tr></table></figure></p>
<p>这样我们就可以实现项目的远程操作。</p>
<a id="more"></a>
<h2 id="GIT-CLONE"><a href="#GIT-CLONE" class="headerlink" title="GIT CLONE"></a>GIT CLONE</h2><p>当远程 Git 仓库已经存在一个项目时，需要对此项目进行操作；或者有一个你想为此贡献自己一份力的开源项目时，就需要用到 <code>$ git clone</code>。当你执行 <code>$ git clone</code> 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p>
<p>克隆仓库的命令格式为 <code>$ git clone [url]</code>。例如，要克隆 Git 的可链接库 test，可以用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:jovey-zheng/test.git</div></pre></td></tr></table></figure></p>
<p>这会在当前目录下创建一个名为 <code>test</code> 的目录，并初始化一个 <code>.git</code> 文件夹。<br>如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:jovey-zheng/test.git myTest</div></pre></td></tr></table></figure></p>
<p>这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 myTest。</p>
<p>Git 支持多种数据传输协议。上面的例子使用的是 <code>SSH</code> 传输协议，当然也可以使用 <code>https://</code> 协议。</p>
<p>关于SSH：《<a href="http://www.jianshu.com/p/697fe0815689" target="_blank" rel="external">SSH key 生成</a>》<br>推荐：《<a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git pro</a>》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;获取-Git-仓库&quot;&gt;&lt;a href=&quot;#获取-Git-仓库&quot; class=&quot;headerlink&quot; title=&quot;获取 Git 仓库&quot;&gt;&lt;/a&gt;获取 Git 仓库&lt;/h1&gt;&lt;p&gt;获取 Git 仓库的方式主要分为两种。第一种是在现有项目或目录下导入所有文件到 Git 中；第二种是从一个服务器克隆一个现有的 Git 仓库。&lt;/p&gt;
&lt;h2 id=&quot;GIT-INIT&quot;&gt;&lt;a href=&quot;#GIT-INIT&quot; class=&quot;headerlink&quot; title=&quot;GIT INIT&quot;&gt;&lt;/a&gt;GIT INIT&lt;/h2&gt;&lt;p&gt;首先在现有的项目目录下输入：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就简单将你的目录转变成一个Git仓库。该命令将创建一个名为 &lt;code&gt;.git&lt;/code&gt; 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。&lt;/p&gt;
&lt;p&gt;如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git add .  //`.` 是将目录的所有文件都添加（不包括空文件夹）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git commit -m &amp;apos;first commit&amp;apos;  //提交修改（`&amp;apos;first commit&amp;apos;` 为注释信息）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时可以使用 &lt;code&gt;$ git status&lt;/code&gt; 来查看当前文件状态。&lt;br&gt;我们还可以将项目加入到远程Git仓库：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git remote add origin git@github.com:jovey-zheng/test.git  //加入到远程的 Git 仓库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git push -u origin master  //将项目推到 Git 仓库&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样我们就可以实现项目的远程操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://joveyzheng.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://joveyzheng.com/tags/git/"/>
    
      <category term="项目管理" scheme="http://joveyzheng.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>生成 SSH keys</title>
    <link href="http://joveyzheng.com/2015/09/07/use-git-generate-ssh-key/"/>
    <id>http://joveyzheng.com/2015/09/07/use-git-generate-ssh-key/</id>
    <published>2015-09-07T07:04:33.000Z</published>
    <updated>2017-06-15T12:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先确认自己的系统中是否已经拥有密钥。在默认情况下SSH的密钥存储在其 <code>~/.ssh</code> 目录下。可以使用以下命令进入目录并列出内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.ssh</div><div class="line">$ ls</div><div class="line"></div><div class="line">id_rsa  id_rsa.pub  known_hosts</div></pre></td></tr></table></figure></p>
<p>其中 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 就是存储密钥的文件，带有 <code>.pub</code> 后缀的是公钥，另外一个则是私钥。如果存在这些文件，则可以直接用 <code>$ cat id_rsa.pub</code> 来读取密钥内容。<br>如果找不到这样的文件（或者不存在 <code>~/.ssh</code> 目录），则可以通过 <code>$ ssh-keygen</code> 来创建它们。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C `you@email.com`</div><div class="line"></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/home/schacon/.ssh/id_rsa):</div><div class="line">Created directory &apos;/home/schacon/.ssh&apos;.</div><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved in /home/schacon/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 you@email.com</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>首先 <code>$ ssh-keygen</code> 会确认密钥的存储位置（默认是 <code>.ssh/id_rsa</code>），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可（为了方便以后操作，建议不设置密码）。</p>
<p>在完成上述操作之后即可获得 SSH key，获得的公钥大概是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ cat id_rsa.pub</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmzM2RosSFanpxK+d3Eagt3Wicef9QbgH1x4yH3MFg2</div><div class="line">+6vIuFXchl+L3gMZabWH3BzKpBwoJICg8q9k4N8nOf5LNPtIp74hnEj/1b9Nh7OLrri82Ao6FYEdkC</div><div class="line">0NVsfhKlqha10MQrYxctimabtuKZdoUvv0knSawwvql2mvCIDra2D2350ICycZi0Fg1QULF3QdDF8E</div><div class="line">mtnvso1a5a9jgzf3tyHX6+r7lGnA+Ifzr8bxC4sqZ+aN0R7dn4uqQETF7l+n16dd370Efvbvj8CabZ</div><div class="line">qVs7r5j/fdltcmSrH3i97Yfq0XsM0CIxltOIb8+MhkRzHAXdjWY51LyfyHtyysbgHw==</div><div class="line">you@email.com</div></pre></td></tr></table></figure></p>
<p>关于在多种操作系统中生成 SSH 密钥的更深入教程，请参阅 GitHub 的 SSH 密钥指南：<a href="https://help.github.com/articles/generating-ssh-keys" target="_blank" rel="external"><em>https://help.github.com/articles/generating-ssh-keys</em></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先确认自己的系统中是否已经拥有密钥。在默认情况下SSH的密钥存储在其 &lt;code&gt;~/.ssh&lt;/code&gt; 目录下。可以使用以下命令进入目录并列出内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cd ~/.ssh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ls&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;id_rsa  id_rsa.pub  known_hosts&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;id_rsa&lt;/code&gt; 和 &lt;code&gt;id_rsa.pub&lt;/code&gt; 就是存储密钥的文件，带有 &lt;code&gt;.pub&lt;/code&gt; 后缀的是公钥，另外一个则是私钥。如果存在这些文件，则可以直接用 &lt;code&gt;$ cat id_rsa.pub&lt;/code&gt; 来读取密钥内容。&lt;br&gt;如果找不到这样的文件（或者不存在 &lt;code&gt;~/.ssh&lt;/code&gt; 目录），则可以通过 &lt;code&gt;$ ssh-keygen&lt;/code&gt; 来创建它们。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -C `you@email.com`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Generating public/private rsa key pair.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter file in which to save the key (/home/schacon/.ssh/id_rsa):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Created directory &amp;apos;/home/schacon/.ssh&amp;apos;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter passphrase (empty for no passphrase):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter same passphrase again:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Your identification has been saved in /home/schacon/.ssh/id_rsa.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The key fingerprint is:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 you@email.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔记随笔" scheme="http://joveyzheng.com/categories/%E7%AC%94%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="SSH" scheme="http://joveyzheng.com/tags/SSH/"/>
    
      <category term="git" scheme="http://joveyzheng.com/tags/git/"/>
    
      <category term="加密" scheme="http://joveyzheng.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
</feed>
